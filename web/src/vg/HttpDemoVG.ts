// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: vg/HttpDemoVG.kt
// Package: com.lightningkite.butterflytemplate.vg
import { xProgressBarBindFloat } from 'butterfly-web/dist/observables/binding/ProgressBar.binding'
import { hashAnything, safeEq } from 'butterfly-web/dist/Kotlin'
import { HttpClient } from 'butterfly-web/dist/net/HttpClient'
import { xObservableMapNotNull } from 'butterfly-web/dist/rx/RxExtensions'
import { Observable } from 'rxjs'
import { xTextViewBindString } from 'butterfly-web/dist/observables/binding/TextView.binding'
import { ViewGenerator } from 'butterfly-web/dist/views/ViewGenerator'
import { HttpDemoXml } from '../layout/HttpDemoXml'
import { xResponseReadJson } from 'butterfly-web/dist/net/RxHttpAssist'
import { ComponentTextXml } from '../layout/ComponentTextXml'
import { xObservablePropertyMap } from 'butterfly-web/dist/observables/TransformedObservableProperty'
import { HttpProgress } from 'butterfly-web/dist/net/HttpModels'
import { xObservableAsObservableProperty } from 'butterfly-web/dist/observables/EventToObservableProperty'
import { ObservableProperty } from 'butterfly-web/dist/observables/ObservableProperty'
import { map as rxMap } from 'rxjs/operators'
import { xRecyclerViewBind } from 'butterfly-web/dist/observables/binding/RecyclerView.binding'
import { parse as parseJsonTyped } from 'butterfly-web/dist/net/jsonParsing'

//! Declares com.lightningkite.butterflytemplate.vg.HttpDemoVG
export class HttpDemoVG extends ViewGenerator {
    public constructor() {
        super();
    }
    
    
    
    //! Declares com.lightningkite.butterflytemplate.vg.HttpDemoVG.title
    public get title(): string { return "Http Demo"; }
    
    
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = new HttpDemoXml();
        
        const view = xml.setup(dependency);
        
        
        //--- Call
        const call = HttpClient.INSTANCE.callWithProgress<Array<HttpDemoVG.Post>>("https://jsonplaceholder.typicode.com/posts/", undefined, undefined, undefined, undefined, (it: Response): Observable<Array<HttpDemoVG.Post>> => xResponseReadJson<Array<HttpDemoVG.Post>>(it, [Array, [HttpDemoVG.Post]]));
        
        
        //--- Set Up xml.progress
        xProgressBarBindFloat(xml.progress, xObservableAsObservableProperty<number>(call.pipe(rxMap((it: HttpProgress<Array<HttpDemoVG.Post>>): number => it.approximate)), 0));
        
        //--- Set Up xml.items
        xRecyclerViewBind<HttpDemoVG.Post>(xml.items, xObservableAsObservableProperty<Array<HttpDemoVG.Post>>(xObservableMapNotNull<HttpProgress<Array<HttpDemoVG.Post>>, Array<HttpDemoVG.Post>>(call, (it: HttpProgress<Array<HttpDemoVG.Post>>): (Array<HttpDemoVG.Post> | null) => it.response), [new HttpDemoVG.Post(0, 0, "Loading...", "-")]), new HttpDemoVG.Post(0, 0, "Default", "Failure"), (observable: ObservableProperty<HttpDemoVG.Post>): HTMLElement => {
                //--- Make Subview For xml.items
                const cellXml = new ComponentTextXml();
                
                const cellView = cellXml.setup(dependency);
                
                
                //--- Set Up cellXml.label
                xTextViewBindString(cellXml.label, xObservablePropertyMap<HttpDemoVG.Post, string>(observable, (it: HttpDemoVG.Post): string => it.title));
                //--- End Make Subview For xml.items
                return cellView;
        });
        
        //--- Generate End (overwritten on flow generation)
        
        return view;
    }
    
    //--- Init
    
    
    
    //--- Actions
    
    
    //--- Body End
}
export namespace HttpDemoVG {
    //! Declares com.lightningkite.butterflytemplate.vg.HttpDemoVG.Post
    export class Post {
        public readonly userId: number;
        public readonly id: number;
        public readonly title: string;
        public readonly body: string;
        public constructor(userId: number, id: number, title: string, body: string) {
            this.userId = userId;
            this.id = id;
            this.title = title;
            this.body = body;
        }
        public static fromJson(obj: any): Post { return new Post(
                parseJsonTyped(obj["userId"], [Number]) as number, 
                parseJsonTyped(obj["id"], [Number]) as number, 
                parseJsonTyped(obj["title"], [String]) as string, 
                parseJsonTyped(obj["body"], [String]) as string
        ) }
        public toJSON(): object { return {
                userId: this.userId, 
                id: this.id, 
                title: this.title, 
                body: this.body
        } }
        public hashCode(): number {
            let hash = 17;
            hash = 31 * hash + hashAnything(this.userId);
            hash = 31 * hash + hashAnything(this.id);
            hash = 31 * hash + hashAnything(this.title);
            hash = 31 * hash + hashAnything(this.body);
            return hash;
        }
        public equals(other: any): boolean { return other instanceof Post && safeEq(this.userId, other.userId) && safeEq(this.id, other.id) && safeEq(this.title, other.title) && safeEq(this.body, other.body) }
        public toString(): string { return `Post(userId = ${this.userId}, id = ${this.id}, title = ${this.title}, body = ${this.body})` }
        public copy(userId: number = this.userId, id: number = this.id, title: string = this.title, body: string = this.body): Post { return new Post(userId, id, title, body); }
    }
}

