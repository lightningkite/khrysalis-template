//! This file will translate using Butterfly.
// Generated by Butterfly TypeScript converter - this file will be overwritten.
// File: vg/DateButtonDemoVG.shared.kt
// Package: com.lightningkite.butterflytemplate.vg
import { xDateButtonBind, xTimeButtonBind } from 'butterfly/dist/observables/binding/DateButton.binding.actual'
import { DateButtonDemoXml } from '../layout/DateButtonDemoXml'
import { MutableObservableProperty } from 'butterfly/dist/observables/MutableObservableProperty.shared'
import { StandardObservableProperty } from 'butterfly/dist/observables/StandardObservableProperty.shared'
import { ViewGenerator } from 'butterfly/dist/views/ViewGenerator.shared'
import { xTextViewBindString } from 'butterfly/dist/observables/binding/TextView.binding.actual'
import { ClockPartSize } from 'butterfly/dist/time/ClockPartSize.shared'
import { xObservablePropertyMap } from 'butterfly/dist/observables/TransformedObservableProperty.shared'
import { xDateFormat } from 'butterfly/dist/time/Date.actual'

//! Declares com.lightningkite.butterflytemplate.vg.DateButtonDemoVG
export class DateButtonDemoVG extends ViewGenerator {
    public constructor() {
        super();
        this.date = new StandardObservableProperty<Date>(new Date(), undefined);
    }
    
    //! Declares com.lightningkite.butterflytemplate.vg.DateButtonDemoVG.title
    public get title(): string { return "Date Button Demo"; }
    
    
    public readonly date: MutableObservableProperty<Date>;
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = new DateButtonDemoXml();
        
        const view = xml.setup(dependency);
        
        
        xTextViewBindString(xml.text, xObservablePropertyMap<Date, string>(this.date, (it: Date): string => xDateFormat(it, ClockPartSize.Medium, ClockPartSize.Medium)));
        xDateButtonBind(xml.dateButton, this.date);
        xTimeButtonBind(xml.timeButton, this.date, undefined);
        
        return view;
    }
}

