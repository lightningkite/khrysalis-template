// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: vg/LoginDemoVG.shared.kt
// Package: com.lightningkite.khrysalistemplate.vg
// FQImport: com.lightningkite.khrysalistemplate.vg.ExampleContentVG TS ExampleContentVG
// FQImport: com.lightningkite.khrysalistemplate.vg.LoginDemoVG.agree TS agree
// FQImport: com.lightningkite.khrysalistemplate.vg.LoginDemoVG.generate.view TS view
// FQImport: com.lightningkite.khrysalistemplate.R.string.password TS password
// FQImport: com.lightningkite.khrysalis.views.ViewGenerator TS ViewGenerator
// FQImport: com.lightningkite.khrysalis.views.matches>com.lightningkite.khrysalis.views.FormField<kotlin.Any> TS comLightningkiteKhrysalisViewsFormFieldMatches
// FQImport: com.lightningkite.khrysalistemplate.vg.LoginDemoVG.generate.dependency TS dependency
// FQImport: com.lightningkite.khrysalis.delay TS delay
// FQImport: com.lightningkite.khrysalistemplate.layouts.LoginDemoXml.setup TS setup
// FQImport: com.lightningkite.khrysalis.observables.binding.bindString>android.widget.EditText TS androidWidgetEditTextBindString
// FQImport: com.lightningkite.khrysalistemplate.vg.LoginDemoVG.password TS password
// FQImport: com.lightningkite.khrysalis.views.FormField.value TS value
// FQImport: com.lightningkite.khrysalis.views.required>com.lightningkite.khrysalis.views.FormField<kotlin.String> TS comLightningkiteKhrysalisViewsFormFieldRequired
// FQImport: com.lightningkite.khrysalistemplate.layouts.LoginDemoXml.submitLoading TS submitLoading
// FQImport: com.lightningkite.khrysalis.views.FormField.observable TS observable
// FQImport: com.lightningkite.khrysalistemplate.vg.LoginDemoVG.verifyPassword.<anonymous>.field TS field
// FQImport: com.lightningkite.khrysalis.observables.binding.bindLoading>android.widget.ViewFlipper TS androidWidgetViewFlipperBindLoading
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty TS StandardObservableProperty
// FQImport: com.lightningkite.khrysalistemplate.vg.LoginDemoVG.submit TS submit
// FQImport: com.lightningkite.khrysalis.views.Form TS Form
// FQImport: com.lightningkite.khrysalis.observables.MutableObservableProperty TS MutableObservableProperty
// FQImport: com.lightningkite.khrysalistemplate.vg.LoginDemoVG.form TS form
// FQImport: com.lightningkite.khrysalistemplate.layouts.LoginDemoXml.agree TS agree
// FQImport: com.lightningkite.khrysalistemplate.R.string.mustAgree TS mustAgree
// FQImport: com.lightningkite.khrysalistemplate.vg.LoginDemoVG.verifyPassword TS verifyPassword
// FQImport: com.lightningkite.khrysalistemplate.vg.LoginDemoVG.loading TS loading
// FQImport: com.lightningkite.khrysalis.observables.MutableObservableProperty.value TS value
// FQImport: com.lightningkite.khrysalis.observables.binding.bind>android.widget.CompoundButton TS androidWidgetCompoundButtonBind
// FQImport: com.lightningkite.khrysalis.views.Form.field TS fieldRes
// FQImport: com.lightningkite.khrysalis.views.ViewStringResource TS ViewStringResource
// FQImport: com.lightningkite.khrysalistemplate.R.string.verify_password TS verify_password
// FQImport: com.lightningkite.khrysalistemplate.vg.LoginDemoVG.generate.xml TS xml
// FQImport: com.lightningkite.khrysalistemplate.vg.LoginDemoVG.agree.<anonymous>.field TS field
// FQImport: com.lightningkite.khrysalis.views.FormField TS FormField
// FQImport: com.lightningkite.khrysalistemplate.R TS R
// FQImport: com.lightningkite.khrysalistemplate.vg.LoginDemoVG.password.<anonymous>.field TS field
// FQImport: com.lightningkite.khrysalis.views.Form.runOrDialog TS runOrDialog
// FQImport: com.lightningkite.khrysalistemplate.vg.LoginDemoVG.stack TS stack
// FQImport: com.lightningkite.khrysalis.observables.ObservableStack.push TS push
// FQImport: com.lightningkite.khrysalis.observables.ObservableStack TS ObservableStack
// FQImport: com.lightningkite.khrysalistemplate.layouts.LoginDemoXml.password TS password
// FQImport: com.lightningkite.khrysalistemplate.layouts.LoginDemoXml.username TS username
// FQImport: com.lightningkite.khrysalistemplate.vg.LoginDemoVG.username.<anonymous>.field TS field
// FQImport: com.lightningkite.khrysalis.views.unless>com.lightningkite.khrysalis.views.ViewString TS comLightningkiteKhrysalisViewsViewStringUnless
// FQImport: com.lightningkite.khrysalistemplate.vg.LoginDemoVG.username TS username
// FQImport: com.lightningkite.khrysalistemplate.layouts.LoginDemoXml.verifyPassword TS verifyPassword
// FQImport: com.lightningkite.khrysalistemplate.layouts.LoginDemoXml TS LoginDemoXml
// FQImport: com.lightningkite.khrysalistemplate.R.string TS string
// FQImport: com.lightningkite.khrysalistemplate.layouts.LoginDemoXml.submit TS submit
// FQImport: com.lightningkite.khrysalistemplate.R.string.username TS username
import { androidWidgetEditTextBindString } from 'khrysalis/dist/observables/binding/EditText.binding.actual'
import { R } from '../R'
import { Form, FormField, comLightningkiteKhrysalisViewsFormFieldMatches, comLightningkiteKhrysalisViewsFormFieldRequired, comLightningkiteKhrysalisViewsViewStringUnless } from 'khrysalis/dist/views/Form.shared'
import { ExampleContentVG } from './ExampleContentVG.shared'
import { androidWidgetCompoundButtonBind } from 'khrysalis/dist/observables/binding/CompoundButton.binding.actual'
import { MutableObservableProperty } from 'khrysalis/dist/observables/MutableObservableProperty.shared'
import { StandardObservableProperty } from 'khrysalis/dist/observables/StandardObservableProperty.shared'
import { ViewGenerator } from 'khrysalis/dist/views/ViewGenerator.shared'
import { ObservableStack } from 'khrysalis/dist/observables/ObservableStack.shared'
import { androidWidgetViewFlipperBindLoading } from 'khrysalis/dist/observables/binding/ViewFlipper.binding.actual'
import { LoginDemoXml } from '../layout/LoginDemoXml'
import { delay } from 'khrysalis/dist/delay.actual'
import { ViewStringResource } from 'khrysalis/dist/views/Strings.shared'

//! Declares com.lightningkite.khrysalistemplate.vg.LoginDemoVG
export class LoginDemoVG extends ViewGenerator {
    public readonly stack: ObservableStack<ViewGenerator>;
    public constructor(stack: ObservableStack<ViewGenerator>) {
        super();
        this.stack = stack;
        this.form = new Form();
        this.username = this.form.fieldRes(R._string.username, "", (field) => comLightningkiteKhrysalisViewsFormFieldRequired(field));
        this.password = this.form.fieldRes(R._string.password, "", (field) => comLightningkiteKhrysalisViewsFormFieldRequired(field));
        this.verifyPassword = this.form.fieldRes(R._string.verify_password, "", (field) => comLightningkiteKhrysalisViewsFormFieldRequired(field) ?? comLightningkiteKhrysalisViewsFormFieldMatches(field, this.password));
        this.agree = this.form.fieldRes(R._string.password, false, (field) => comLightningkiteKhrysalisViewsViewStringUnless(new ViewStringResource(R._string.mustAgree), field.value));
        this.loading = new StandardObservableProperty(false, undefined);
    }
    
    //! Declares com.lightningkite.khrysalistemplate.vg.LoginDemoVG.title
    public get title(): string { return "Log In Demo"; }
    
    
    public readonly form: Form;
    
    public readonly username: FormField<string>;
    
    public readonly password: FormField<string>;
    
    public readonly verifyPassword: FormField<string>;
    
    public readonly agree: FormField<boolean>;
    
    public readonly loading: MutableObservableProperty<boolean>;
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = new LoginDemoXml();
        
        const view = xml.setup(dependency);
        
        
        androidWidgetEditTextBindString(xml.username, this.username.observable);
        androidWidgetEditTextBindString(xml.password, this.password.observable);
        androidWidgetEditTextBindString(xml.verifyPassword, this.verifyPassword.observable);
        androidWidgetCompoundButtonBind(xml.agree, this.agree.observable);
        androidWidgetViewFlipperBindLoading(xml.submitLoading, this.loading, undefined);
        xml.submit.onclick = (_ev) => { _ev.stopPropagation(); 
            this.submit();
        };
        
        return view;
    }
    
    private submit(): void {
        this.form.runOrDialog(() => {
                console.log("Submit!");
                this.loading.value = true;
                delay(1000, () => {
                        this.loading.value = false;
                        this.stack?.push(new ExampleContentVG());
                });
        });
    }
}

