// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: vg/MapDemoVG.kt
// Package: com.lightningkite.butterflytemplate.vg
import { xObservablePropertyObservableNNGet } from 'butterfly-web/dist/observables/ObservableProperty.ext'
import { xEditTextBindString } from 'butterfly-web/dist/observables/binding/EditText.binding'
import { xTextViewBindString } from 'butterfly-web/dist/observables/binding/TextView.binding'
import { xDisposableUntil, xViewRemovedGet } from 'butterfly-web/dist/rx/DisposeCondition.ext'
import { ObservableInput, SubscriptionLike } from 'rxjs'
import { ViewGenerator } from 'butterfly-web/dist/views/ViewGenerator'
import { debounceTime as rxDebounceTime, distinctUntilChanged as rxDistinctUntilChanged, flatMap as rxFlatMap } from 'rxjs/operators'
import { GeoCoordinate } from 'butterfly-web/dist/location/GeoCoordinate'
import { GeoAddress } from 'butterfly-web/dist/location/GeoAddress'
import { MapDemoXml } from '../layout/MapDemoXml'
import { ComponentTextXml } from '../layout/ComponentTextXml'
import { xObservablePropertyMap } from 'butterfly-web/dist/observables/TransformedObservableProperty'
import { StandardObservableProperty } from 'butterfly-web/dist/observables/StandardObservableProperty'
import { xMapViewBindSelect } from 'butterfly-maps-web-google/dist/MapView.bind'
import { ObservableProperty } from 'butterfly-web/dist/observables/ObservableProperty'
import { xViewOnClick } from 'butterfly-web/dist/views/View.ext'
import { xActivityAccessGeocode } from 'butterfly-web/dist/location/Geocoding'
import { xRecyclerViewBind } from 'butterfly-web/dist/observables/binding/RecyclerView.binding'

//! Declares com.lightningkite.butterflytemplate.vg.MapDemoVG
export class MapDemoVG extends ViewGenerator {
    public constructor() {
        super();
        this.text = new StandardObservableProperty<string>("", undefined);
        this.position = new StandardObservableProperty<(GeoCoordinate | null)>(null, undefined);
        this.options = new StandardObservableProperty<Array<GeoAddress>>([], undefined);
    }
    
    //! Declares com.lightningkite.butterflytemplate.vg.MapDemoVG.title
    public get title(): string { return "Map Demo"; }
    
    
    public readonly text: StandardObservableProperty<string>;
    
    public readonly position: StandardObservableProperty<(GeoCoordinate | null)>;
    
    public readonly options: StandardObservableProperty<Array<GeoAddress>>;
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = new MapDemoXml();
        
        const view = xml.setup(dependency);
        
        
        xMapViewBindSelect(xml.map, dependency, this.position, undefined, undefined, undefined);
        xEditTextBindString(xml.select, this.text);
        xRecyclerViewBind<GeoAddress>(xml.options, this.options, new GeoAddress(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined), (obs: ObservableProperty<GeoAddress>): HTMLElement => {
                const xml = new ComponentTextXml();
                
                const view = xml.setup(dependency);
                
                xTextViewBindString(xml.label, xObservablePropertyMap<GeoAddress, string>(obs, (it: GeoAddress): string => it.oneLine(undefined, undefined)));
                xViewOnClick(xml.xmlRoot, undefined, (): void => {
                        this.position.value = obs.value.coordinate;
                });
                return view;
        });
        
        xDisposableUntil<SubscriptionLike>(xObservablePropertyObservableNNGet(this.text).pipe(rxDebounceTime(1000)).pipe(rxDistinctUntilChanged()).pipe(rxFlatMap((it: string): ObservableInput<Array<GeoAddress>> => xActivityAccessGeocode(dependency, it, undefined))).subscribe((it: Array<GeoAddress>): void => {
                    this.options.value = it;
        }, undefined, undefined), xViewRemovedGet(view));
        
        return view;
    }
}

