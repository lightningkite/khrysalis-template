//! This file will translate using Butterfly.
// Generated by Butterfly TypeScript converter - this file will be overwritten.
// File: vg/PreviewVG.shared.kt
// Package: com.lightningkite.butterflytemplate.vg
import { SelectDemoXml } from '../layout/SelectDemoXml'
import { ViewPagerDemoXml } from '../layout/ViewPagerDemoXml'
import { xDisposableUntil, xViewRemovedGet } from 'butterfly/dist/rx/DisposeCondition.actual'
import { MainXml } from '../layout/MainXml'
import { setViewText } from 'butterfly/dist/views/ViewWithText.ext.actual'
import { SubscriptionLike } from 'rxjs'
import { xObservablePropertySubscribeBy } from 'butterfly/dist/observables/ObservableProperty.ext.shared'
import { SliderDemoXml } from '../layout/SliderDemoXml'
import { DateRangeDemoXml } from '../layout/DateRangeDemoXml'
import { ExampleContentXml } from '../layout/ExampleContentXml'
import { StandardObservableProperty } from 'butterfly/dist/observables/StandardObservableProperty.shared'
import { ViewGenerator } from 'butterfly/dist/views/ViewGenerator.shared'
import { SegmentedControlDemoXml } from '../layout/SegmentedControlDemoXml'
import { PreviewXml } from '../layout/PreviewXml'
import { ControlsDemoXml } from '../layout/ControlsDemoXml'
import { xViewPagerBindStatic } from 'butterfly/dist/observables/binding/ViewPager.binding.actual'
import { LoginDemoXml } from '../layout/LoginDemoXml'

//! Declares com.lightningkite.butterflytemplate.vg.PreviewVG
export class PreviewVG extends ViewGenerator {
    public constructor() {
        super();
        this.previews = [new PreviewVG.XmlPreview("ControlsDemoXml", (it: Window): HTMLElement => new ControlsDemoXml().setup(it)), new PreviewVG.XmlPreview("DateRangeDemoXml", (it: Window): HTMLElement => new DateRangeDemoXml().setup(it)), new PreviewVG.XmlPreview("ExampleContentXml", (it: Window): HTMLElement => new ExampleContentXml().setup(it)), new PreviewVG.XmlPreview("LoginDemoXml", (it: Window): HTMLElement => new LoginDemoXml().setup(it)), new PreviewVG.XmlPreview("MainXml", (it: Window): HTMLElement => new MainXml().setup(it)), new PreviewVG.XmlPreview("SegmentedControlDemoXml", (it: Window): HTMLElement => new SegmentedControlDemoXml().setup(it)), new PreviewVG.XmlPreview("SelectDemoXml", (it: Window): HTMLElement => new SelectDemoXml().setup(it)), new PreviewVG.XmlPreview("SliderDemoXml", (it: Window): HTMLElement => new SliderDemoXml().setup(it)), new PreviewVG.XmlPreview("ViewPagerDemoXml", (it: Window): HTMLElement => new ViewPagerDemoXml().setup(it))];
        this.previewIndex = new StandardObservableProperty<number>(0, undefined);
    }
    
    //! Declares com.lightningkite.butterflytemplate.vg.PreviewVG.title
    public get title(): string { return "Preview"; }
    
    
    
    
    public readonly previews: Array<PreviewVG.XmlPreview>;
    
    
    public readonly previewIndex: StandardObservableProperty<number>;
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = new PreviewXml();
        
        const view = xml.setup(dependency);
        
        xViewPagerBindStatic<PreviewVG.XmlPreview>(xml.pager, this.previews, this.previewIndex, (it: PreviewVG.XmlPreview): HTMLElement => it.make(dependency));
        xDisposableUntil<SubscriptionLike>(xObservablePropertySubscribeBy<number>(this.previewIndex, undefined, undefined, (it: number): void => {
                    setViewText(xml.viewName, this.previews[it].name);
        }), xViewRemovedGet(view));
        return view;
    }
    
}
export namespace PreviewVG {
    //! Declares com.lightningkite.butterflytemplate.vg.PreviewVG.XmlPreview
    export class XmlPreview {
        public readonly name: string;
        public readonly make:  ((a: Window) => HTMLElement);
        public constructor(name: string, make:  ((a: Window) => HTMLElement)) {
            this.name = name;
            this.make = make;
        }
    }
}

