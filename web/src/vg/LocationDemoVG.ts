// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: vg/LocationDemoVG.kt
// Package: com.lightningkite.butterflytemplate.vg
import { xObservablePropertyMap } from 'butterfly-web/dist/observables/TransformedObservableProperty'
import { StandardObservableProperty } from 'butterfly-web/dist/observables/StandardObservableProperty'
import { xViewOnClick } from 'butterfly-web/dist/views/View.ext'
import { LocationDemoXml } from '../layout/LocationDemoXml'
import { xActivityAccessRequestLocation } from 'butterfly-web/dist/location/ViewDependency.location'
import { xTextViewBindString } from 'butterfly-web/dist/observables/binding/TextView.binding'
import { LocationResult } from 'butterfly-web/dist/location/LocationResult'
import { ViewGenerator } from 'butterfly-web/dist/views/ViewGenerator'
import { MutableObservableProperty } from 'butterfly-web/dist/observables/MutableObservableProperty'

//! Declares com.lightningkite.butterflytemplate.vg.LocationDemoVG
export class LocationDemoVG extends ViewGenerator {
    public constructor() {
        super();
        this.locationInfo = new StandardObservableProperty<(LocationResult | null)>(null, undefined);
    }
    
    //! Declares com.lightningkite.butterflytemplate.vg.LocationDemoVG.title
    public get title(): string { return "Location Demo"; }
    
    
    public readonly locationInfo: MutableObservableProperty<(LocationResult | null)>;
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = new LocationDemoXml();
        
        const view = xml.setup(dependency);
        
        xViewOnClick(xml.getLocation, undefined, (): void => {
                xActivityAccessRequestLocation(dependency, 100.0, 5.0, (location: (LocationResult | null), message: (string | null)): void => {
                        console.log(message);
                        this.locationInfo.value = location;
                });
        });
        xTextViewBindString(xml.locationDisplay, xObservablePropertyMap<(LocationResult | null), string>(this.locationInfo, (it: (LocationResult | null)): string => {
                    if (it !== null) {
                        return `${it!.coordinate}`;
                    } else {
                        return "Nothing yet";
                    }
        }));
        return view;
    }
}

