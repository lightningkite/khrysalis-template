// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: vg/PongDemoVG.shared.kt
// Package: com.lightningkite.khrysalistemplate.vg
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.ballRadius TS ballRadius
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.ballVY TS ballVY
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.paddleLeftY TS paddleLeftY
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.scoreRight TS scoreRight
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.reverseY.y TS y
// FQImport: android.graphics.Paint.textSize TS textSize
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.onTouchUp TS onTouchUp
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.<init>.<anonymous>.time TS time
// FQImport: android.graphics.Paint.color TS color
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.stageHalfLength TS stageHalfLength
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.frame.time TS time
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.ballX TS ballX
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.reverseX.x TS x
// FQImport: com.lightningkite.khrysalis.views.ViewGenerator TS ViewGenerator
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDemoVG.generate.xml TS xml
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.postInvalidate TS postInvalidate
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.stageHalfWidth TS stageHalfWidth
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.onTouchDown.y TS y
// FQImport: com.lightningkite.khrysalis.rx.until>io.reactivex.disposables.Disposable TS ioReactivexDisposablesDisposableUntil
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.width TS width
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.paint TS paint
// FQImport: android.util.DisplayMetrics TS DisplayMetrics
// FQImport: io.reactivex.subjects.PublishSubject.subscribe TS subscribe
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.onTouchUp.x TS x
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.draw.width TS width
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.onTouchDown.x TS x
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.paddleHalfWidth TS paddleHalfWidth
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.sizeThatFitsWidth.height TS height
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.transformY TS transformY
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.onTouchDown.id TS id
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.onTouchMove.height TS height
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.onTouchMove.width TS width
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.scoreLeft TS scoreLeft
// FQImport: com.lightningkite.khrysalistemplate.layouts.PongDemoXml.setup TS setup
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.paddleHalfThickness TS paddleHalfThickness
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDemoVG.generate.view TS view
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.paddleRightY TS paddleRightY
// FQImport: com.lightningkite.khrysalistemplate.layouts.PongDemoXml TS PongDemoXml
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.draw.height TS height
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.onTouchDown.height TS height
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.transformX.x TS x
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.onTouchMove.x TS x
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.onTouchUp.y TS y
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.reverseY TS reverseY
// FQImport: com.lightningkite.khrysalis.views.draw.newLinearGradient TS newLinearGradient
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.reverseX TS reverseX
// FQImport: com.lightningkite.khrysalis.views.CustomViewDelegate TS CustomViewDelegate
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.height TS height
// FQImport: android.graphics.Shader.TileMode.REPEAT TS REPEAT
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.draw.canvas TS canvas
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.ballVX TS ballVX
// FQImport: android.graphics.Paint.shader TS shader
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.onTouchMove.y TS y
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.sizeThatFitsHeight.width TS width
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.onTouchDown.width TS width
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDemoVG.generate.dependency TS dependency
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.transformX TS transformX
// FQImport: com.lightningkite.khrysalis.animationFrame TS getAnimationFrame
// FQImport: com.lightningkite.khrysalis.views.draw.drawTextCentered>android.graphics.Canvas TS androidGraphicsCanvasDrawTextCentered
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.removed TS removed
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.frame TS frame
// FQImport: android.graphics.Shader.TileMode TS TileMode
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.paddleOffset TS paddleOffset
// FQImport: android.graphics.Paint TS Paint
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.ballY TS ballY
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.transformY.y TS y
// FQImport: android.graphics.Shader TS Shader
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDelegate.onTouchMove.id TS id
import { Paint } from 'khrysalis/dist/views/draw/Paint.actual'
import { PongDemoXml } from '../layout/PongDemoXml'
import { getAnimationFrame } from 'khrysalis/dist/delay.actual'
import { ioReactivexDisposablesDisposableUntil } from 'khrysalis/dist/rx/DisposeCondition.actual'
import { androidGraphicsCanvasDrawTextCentered } from 'khrysalis/dist/views/draw/Canvas.actual'
import { ViewGenerator } from 'khrysalis/dist/views/ViewGenerator.shared'
import { DisplayMetrics } from 'khrysalis/dist/views/DisplayMetrics.actual'
import { Shader, newLinearGradient } from 'khrysalis/dist/views/draw/LinearGradient.actual'
import { pathFromLTRB, pathOvalFromLTRB } from 'khrysalis/dist/views/draw/Path.actual'
import { CustomViewDelegate } from 'khrysalis/dist/views/CustomViewDelegate.shared'
import { numberToColor } from 'khrysalis/dist/views/Colors.actual'

//! Declares com.lightningkite.khrysalistemplate.vg.PongDemoVG
export class PongDemoVG extends ViewGenerator {
    public constructor() {
        super();
    }
    
    
    //! Declares com.lightningkite.khrysalistemplate.vg.PongDemoVG.title
    public get title(): string { return "Pong Test"; }
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = new PongDemoXml();
        
        const view = xml.setup(dependency);
        
        return view;
    }
}

//! Declares com.lightningkite.khrysalistemplate.vg.PongDelegate
export class PongDelegate extends CustomViewDelegate {
    public constructor() {
        super();
        this.ballX = 0;
        this.ballY = 0;
        this.ballRadius = 5;
        this.ballVX = 100;
        this.ballVY = 100;
        this.stageHalfLength = 100;
        this.stageHalfWidth = 50;
        this.paddleOffset = 20;
        this.paddleHalfThickness = 5;
        this.paddleHalfWidth = 10;
        this.paddleLeftY = 0;
        this.paddleRightY = 0;
        this.scoreLeft = 0;
        this.scoreRight = 0;
        this.paint = new Paint();
        this.paint.color = numberToColor(0xFFFFFFFF);
        this.paint.textSize = 12;
        ioReactivexDisposablesDisposableUntil(getAnimationFrame().subscribe((time) => {
                    this.frame(time);
                    this.postInvalidate();
        }), this.removed);
        this.width = 1;
        this.height = 1;
    }
    
    public ballX: number;
    
    public ballY: number;
    
    public ballRadius: number;
    
    public ballVX: number;
    
    public ballVY: number;
    
    public stageHalfLength: number;
    
    public stageHalfWidth: number;
    
    public paddleOffset: number;
    
    public paddleHalfThickness: number;
    
    public paddleHalfWidth: number;
    
    public paddleLeftY: number;
    
    public paddleRightY: number;
    
    
    public scoreLeft: number;
    
    public scoreRight: number;
    
    
    public frame(time: number): void {
        this.ballX = this.ballX + this.ballVX * time;
        this.ballY = this.ballY + this.ballVY * time;
        if (this.ballY > this.stageHalfWidth - this.ballRadius) {
            this.ballVY = -Math.abs(this.ballVY);
            this.ballY = this.stageHalfWidth - this.ballRadius;
        }
        if (this.ballY < -this.stageHalfWidth + this.ballRadius) {
            this.ballVY = Math.abs(this.ballVY);
            this.ballY = -this.stageHalfWidth + this.ballRadius;
        }
        if (Math.abs(this.ballX - -(this.stageHalfLength - this.paddleOffset)) < this.paddleHalfThickness + this.ballRadius) {
            if (Math.abs(this.ballY - this.paddleLeftY) < this.paddleHalfWidth + this.ballRadius) {
                this.ballVX = Math.abs(this.ballVX);
            }
        }
        if (Math.abs(this.ballX - (this.stageHalfLength - this.paddleOffset)) < this.paddleHalfThickness + this.ballRadius) {
            if (Math.abs(this.ballY - this.paddleRightY) < this.paddleHalfWidth + this.ballRadius) {
                this.ballVX = -Math.abs(this.ballVX);
            }
        }
        if (this.ballX < -this.stageHalfLength) {
            this.ballX = 0;
            this.ballY = 0;
            this.ballVX = -this.ballVX;
            this.scoreRight++;
        } else if (this.ballX > this.stageHalfLength) {
            this.ballX = 0;
            this.ballY = 0;
            this.ballVX = -this.ballVX;
            this.scoreLeft++;
        }
    }
    
    public readonly paint: Paint;
    
    
    
    
    public draw(canvas: CanvasRenderingContext2D, width: number, height: number, displayMetrics: DisplayMetrics): void {
        this.width = width;
        this.height = height;
        // if (this.paint.shader === null && width > 10 && height > 10) {
            this.paint.shader = newLinearGradient(0, 0, width, height, [numberToColor(0xFFFF0000), numberToColor(0xFF0000FF)], [0, 1], Shader.TileMode.REPEAT);
        // }
        this.paint.render(canvas, (pathFromLTRB(this.transformX(-this.stageHalfLength + this.paddleOffset - this.paddleHalfThickness), this.transformY(this.paddleLeftY - this.paddleHalfWidth), this.transformX(-this.stageHalfLength + this.paddleOffset + this.paddleHalfThickness), this.transformY(this.paddleLeftY + this.paddleHalfWidth))));
        this.paint.render(canvas, (pathFromLTRB(this.transformX(this.stageHalfLength - this.paddleOffset - this.paddleHalfThickness), this.transformY(this.paddleRightY - this.paddleHalfWidth), this.transformX(this.stageHalfLength - this.paddleOffset + this.paddleHalfThickness), this.transformY(this.paddleRightY + this.paddleHalfWidth))));
        this.paint.render(canvas, (pathOvalFromLTRB(this.transformX(this.ballX - this.ballRadius), this.transformY(this.ballY - this.ballRadius), this.transformX(this.ballX + this.ballRadius), this.transformY(this.ballY + this.ballRadius))));
        this.paint.textSize = height / 6;
        androidGraphicsCanvasDrawTextCentered(canvas, `${this.scoreLeft} - ${this.scoreRight}`, this.transformX(0), this.transformY(-this.stageHalfWidth / 2), this.paint);
    }
    
    public onTouchDown(id: number, x: number, y: number, width: number, height: number): boolean {
        return this.onTouchUp(id, x, y, width, height);
    }
    
    public onTouchMove(id: number, x: number, y: number, width: number, height: number): boolean {
        return this.onTouchUp(id, x, y, width, height);
    }
    
    public onTouchUp(id: number, x: number, y: number, width: number, height: number): boolean {
        if (this.reverseX(x) < 0) {
            this.paddleLeftY = this.reverseY(y);
        } else {
            this.paddleRightY = this.reverseY(y);
        }
        return true;
    }
    
    public width: number;
    
    public height: number;
    
    public transformX(x: number): number {
        return (x + this.stageHalfLength) / (this.stageHalfLength * 2) * this.width;
    }
    
    public transformY(y: number): number {
        return (y + this.stageHalfWidth) / (this.stageHalfWidth * 2) * this.height;
    }
    
    public reverseX(x: number): number {
        return (x - this.width / 2) / this.width * this.stageHalfLength * 2;
    }
    
    public reverseY(y: number): number {
        return (y - this.height / 2) / this.height * this.stageHalfWidth * 2;
    }
    
    public generateAccessibilityView(): (HTMLElement | null) { return null; }
    
    public sizeThatFitsWidth(width: number, height: number): number {
        return height * this.stageHalfLength / this.stageHalfWidth;
    }
    public sizeThatFitsHeight(width: number, height: number): number {
        return width * this.stageHalfWidth / this.stageHalfLength;
    }
}

