// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: vg/LoginDemoVG.kt
// Package: com.lightningkite.butterflytemplate.vg
import { FormField, xFormFieldMatches, xFormFieldRequired, xViewStringUnless } from 'butterfly/dist/views/FormField'
import { xEditTextBindString } from 'butterfly/dist/observables/binding/EditText.binding'
import { ExampleContentVG } from './ExampleContentVG'
import { Form } from 'butterfly/dist/views/Form'
import { R } from '../R'
import { MutableObservableProperty } from 'butterfly/dist/observables/MutableObservableProperty'
import { delay } from 'butterfly/dist/delay'
import { xViewFlipperBindLoading } from 'butterfly/dist/observables/binding/ViewFlipper.binding'
import { ViewGenerator } from 'butterfly/dist/views/ViewGenerator'
import { StandardObservableProperty } from 'butterfly/dist/observables/StandardObservableProperty'
import { ViewString, ViewStringResource } from 'butterfly/dist/views/ViewString'
import { xViewOnClick } from 'butterfly/dist/views/View.ext'
import { ObservableStack } from 'butterfly/dist/observables/ObservableStack'
import { LoginDemoXml } from '../layout/LoginDemoXml'
import { xCompoundButtonBind } from 'butterfly/dist/observables/binding/CompoundButton.binding'

//! Declares com.lightningkite.butterflytemplate.vg.LoginDemoVG
export class LoginDemoVG extends ViewGenerator {
    public readonly stack: ObservableStack<ViewGenerator>;
    public constructor(stack: ObservableStack<ViewGenerator>) {
        super();
        this.stack = stack;
        this.form = new Form();
        this.username = this.form.fieldRes<string>(R._string.username, "", (field: FormField<string>): (ViewString | null) => xFormFieldRequired(field));
        this.password = this.form.fieldRes<string>(R._string.password, "", (field: FormField<string>): (ViewString | null) => xFormFieldRequired(field));
        this.verifyPassword = this.form.fieldRes<string>(R._string.verify_password, "", (field: FormField<string>): (ViewString | null) => xFormFieldRequired(field) ?? xFormFieldMatches<string>(field, this.password));
        this.agree = this.form.fieldRes<boolean>(R._string.password, false, (field: FormField<boolean>): (ViewString | null) => xViewStringUnless(new ViewStringResource(R._string.mustAgree), field.value));
        this.loading = new StandardObservableProperty<boolean>(false, undefined);
    }
    
    //! Declares com.lightningkite.butterflytemplate.vg.LoginDemoVG.title
    public get title(): string { return "Log In Demo"; }
    
    
    public readonly form: Form;
    
    public readonly username: FormField<string>;
    
    public readonly password: FormField<string>;
    
    public readonly verifyPassword: FormField<string>;
    
    public readonly agree: FormField<boolean>;
    
    public readonly loading: MutableObservableProperty<boolean>;
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = new LoginDemoXml();
        
        const view = xml.setup(dependency);
        
        
        xEditTextBindString(xml.username, this.username.observable);
        xEditTextBindString(xml.password, this.password.observable);
        xEditTextBindString(xml.verifyPassword, this.verifyPassword.observable);
        xCompoundButtonBind(xml.agree, this.agree.observable);
        xViewFlipperBindLoading(xml.submitLoading, this.loading, undefined);
        xViewOnClick(xml.submit, undefined, (): void => {
                this.submit();
        });
        
        return view;
    }
    
    private submit(): void {
        this.form.runOrDialog((): void => {
                console.log("Submit!");
                this.loading.value = true;
                delay(1000, (): void => {
                        this.loading.value = false;
                        this.stack.push(new ExampleContentVG());
                });
        });
    }
}

