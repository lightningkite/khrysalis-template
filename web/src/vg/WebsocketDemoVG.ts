//! This file will translate using Butterfly.
// Generated by Butterfly TypeScript converter - this file will be overwritten.
// File: vg/WebsocketDemoVG.shared.kt
// Package: com.lightningkite.butterflytemplate.vg
import { map as rxMap, publishReplay as rxPublishReplay, refCount as rxRefCount, switchMap as rxSwitchMap, take as rxTake } from 'rxjs/operators'
import { xDisposableUntil, xViewRemovedGet } from 'butterfly/dist/rx/DisposeCondition.actual'
import { WebSocketFrame } from 'butterfly/dist/net/WebSocketFrame.actual'
import { Observable, ObservableInput, SubscriptionLike } from 'rxjs'
import { xObservableAsObservableProperty } from 'butterfly/dist/observables/EventToObservableProperty.shared'
import { ObservableProperty } from 'butterfly/dist/observables/ObservableProperty.shared'
import { ConstantObservableProperty } from 'butterfly/dist/observables/ConstantObservableProperty.shared'
import { WebsocketDemoXml } from '../layout/WebsocketDemoXml'
import { ComponentTextXml } from '../layout/ComponentTextXml'
import { StandardObservableProperty } from 'butterfly/dist/observables/StandardObservableProperty.shared'
import { ViewGenerator } from 'butterfly/dist/views/ViewGenerator.shared'
import { ConnectedWebSocket } from 'butterfly/dist/net/ConnectedWebSocket.actual'
import { xTextViewBindString } from 'butterfly/dist/observables/binding/TextView.binding.actual'
import { HttpClient } from 'butterfly/dist/net/HttpClient.actual'
import { xRecyclerViewBind } from 'butterfly/dist/observables/binding/RecyclerView.binding.actual'
import { xEditTextBindString } from 'butterfly/dist/observables/binding/EditText.binding.actual'

//! Declares com.lightningkite.butterflytemplate.vg.WebsocketDemoVG
export class WebsocketDemoVG extends ViewGenerator {
    public constructor() {
        super();
        this.socket = HttpClient.INSTANCE.webSocket("wss://echo.websocket.org").pipe(rxPublishReplay(1)).pipe(rxRefCount());
        this.text = new StandardObservableProperty<string>("", undefined);
    }
    
    
    
    //! Declares com.lightningkite.butterflytemplate.vg.WebsocketDemoVG.title
    public get title(): string { return "Websocket Demo"; }
    
    
    public readonly socket: Observable<ConnectedWebSocket>;
    
    public readonly text: StandardObservableProperty<string>;
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = new WebsocketDemoXml();
        
        const view = xml.setup(dependency);
        
        
        //--- Set Up xml.items
        const itemsList = ([] as Array<WebSocketFrame>);
        
        xRecyclerViewBind<WebSocketFrame>(xml.items, xObservableAsObservableProperty<Array<WebSocketFrame>>(this.socket.pipe(rxSwitchMap((it: ConnectedWebSocket): ObservableInput<WebSocketFrame> => it.read)).pipe(rxMap((it: WebSocketFrame): Array<WebSocketFrame> => {
                            console.log("Adding item");
                            itemsList.push(it);
                            while (itemsList.length > 20) {
                                itemsList.splice(0, 1)[0];
                            }
                            return itemsList as Array<WebSocketFrame>;
            })), itemsList), new WebSocketFrame(undefined, undefined), (observable: ObservableProperty<WebSocketFrame>): HTMLElement => {
                //--- Make Subview For xml.items (overwritten on flow generation)
                const cellXml = new ComponentTextXml();
                
                const cellView = cellXml.setup(dependency);
                
                
                //--- Set Up cellXml.label (overwritten on flow generation)
                xTextViewBindString(cellXml.label, new ConstantObservableProperty<string>("Some Text"));
                //--- End Make Subview For xml.items (overwritten on flow generation)
                return cellView;
        });
        
        //--- Set Up xml.input
        xEditTextBindString(xml.input, this.text);
        
        //--- Set Up xml.submit
        xml.submit.onclick = (_ev) => { _ev.stopPropagation(); 
            xDisposableUntil<SubscriptionLike>(this.socket.pipe(rxTake(1)).subscribe((it: ConnectedWebSocket): void => {
                        it.next(new WebSocketFrame(undefined, this.text.value));
            }, undefined, undefined), xViewRemovedGet(xml.submit));
        };
        
        //--- Generate End (overwritten on flow generation)
        
        return view;
    }
    
    //--- Init
    
    
    
    //--- Actions
    
    
    public submitClick(): void {
    }
    
    //--- Body End
}

