//! This file will translate using Butterfly.
// Generated by Butterfly TypeScript converter - this file will be overwritten.
// File: vg/SliderDemoVG.shared.kt
// Package: com.lightningkite.butterflytemplate.vg
import { xProgressBarBindFloat } from 'butterfly/dist/observables/binding/ProgressBar.binding.actual'
import { xSeekBarBind } from 'butterfly/dist/observables/binding/SeekBar.binding.actual'
import { MutableObservableProperty } from 'butterfly/dist/observables/MutableObservableProperty.shared'
import { StandardObservableProperty } from 'butterfly/dist/observables/StandardObservableProperty.shared'
import { ViewGenerator } from 'butterfly/dist/views/ViewGenerator.shared'
import { xRatingBarBindFloatMutable, xRatingBarBindMutable } from 'butterfly/dist/observables/binding/RatingBar.binding.actual'
import { xMutableObservablePropertyMap } from 'butterfly/dist/observables/TransformedMutableObservableProperty.shared'
import { xTextViewBindText } from 'butterfly/dist/observables/binding/TextView.binding.actual'
import { SliderDemoXml } from '../layout/SliderDemoXml'

//! Declares com.lightningkite.butterflytemplate.vg.SliderDemoVG
export class SliderDemoVG extends ViewGenerator {
    public constructor() {
        super();
        this.ratio = new StandardObservableProperty<number>(0, undefined);
        this.percent = xMutableObservablePropertyMap<number, number>(this.ratio, (it: number): number => Math.floor((it * 100)), (it: number): number => it / 100);
        this.obsRatingInt = xMutableObservablePropertyMap<number, number>(this.ratio, (it: number): number => Math.floor((it * 5)), (it: number): number => it / 5);
        this.obsRatingFloat = xMutableObservablePropertyMap<number, number>(this.ratio, (it: number): number => it * 5, (it: number): number => it / 5);
    }
    
    //! Declares com.lightningkite.butterflytemplate.vg.SliderDemoVG.title
    public get title(): string { return "Slider Demo"; }
    
    
    public readonly ratio: StandardObservableProperty<number>;
    
    public readonly percent: MutableObservableProperty<number>;
    
    public readonly obsRatingInt: MutableObservableProperty<number>;
    
    public readonly obsRatingFloat: MutableObservableProperty<number>;
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = new SliderDemoXml();
        
        const view = xml.setup(dependency);
        
        
        xSeekBarBind(xml.slider, 0, 100, this.percent);
        xTextViewBindText<number>(xml.valueDisplay, this.percent, (it: number): string => it.toString());
        xProgressBarBindFloat(xml.progress, this.ratio);
        
        xRatingBarBindMutable(xml.rating, 5, this.obsRatingInt);
        xRatingBarBindMutable(xml.ratingDisplayStars, 5, this.obsRatingInt);
        xRatingBarBindMutable(xml.ratingDisplayStarsSmall, 5, this.obsRatingInt);
        xTextViewBindText<number>(xml.ratingDisplayNumber, this.obsRatingInt, (it: number): string => it.toString());
        
        xRatingBarBindFloatMutable(xml.ratingFloat, 5, this.obsRatingFloat);
        xRatingBarBindFloatMutable(xml.ratingDisplayStarsFloat, 5, this.obsRatingFloat);
        xRatingBarBindFloatMutable(xml.ratingDisplayStarsSmallFloat, 5, this.obsRatingFloat);
        xTextViewBindText<number>(xml.ratingDisplayNumberFloat, this.obsRatingFloat, (it: number): string => it.toString());
        
        return view;
    }
}

