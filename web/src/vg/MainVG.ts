// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: vg/MainVG.kt
// Package: com.lightningkite.butterflytemplate.vg
import { iterLastOrNull } from 'butterfly/dist/KotlinCollections'
import { ObservableProperty } from 'butterfly/dist/observables/ObservableProperty'
import { xTextViewBindString } from 'butterfly/dist/observables/binding/TextView.binding'
import { xObservablePropertyMap } from 'butterfly/dist/observables/TransformedObservableProperty'
import { ExampleContentVG } from './ExampleContentVG'
import { MainXml } from '../layout/MainXml'
import { xSwapViewBindStack } from 'butterfly/dist/observables/binding/SwapView.binding'
import { EntryPoint } from 'butterfly/dist/views/EntryPoint'
import { HasBackAction, HasBackActionDefaults } from 'butterfly/dist/views/HasBackAction'
import { ViewGenerator } from 'butterfly/dist/views/ViewGenerator'
import { xViewBindVisible } from 'butterfly/dist/observables/binding/View.binding'
import { xViewOnClick } from 'butterfly/dist/views/View.ext'
import { SelectDemoVG } from './SelectDemoVG'
import { ObservableStack } from 'butterfly/dist/observables/ObservableStack'

//! Declares com.lightningkite.butterflytemplate.vg.MainVG
export class MainVG extends ViewGenerator implements EntryPoint {
    public static implementsInterfaceComLightningkiteButterflyViewsEntryPoint = true;
    public static implementsInterfaceComLightningkiteButterflyViewsHasBackAction = true;
    public constructor() {
        super();
        this.stack = new ObservableStack<ViewGenerator>();
        this.shouldBackBeShown = xObservablePropertyMap<Array<ViewGenerator>, boolean>(this.stack, (it: Array<ViewGenerator>): boolean => it.length > 1);
        this.stack.push(new SelectDemoVG(this.stack));
    }
    
    //! Declares com.lightningkite.butterflytemplate.vg.MainVG.title
    public get title(): string { return "Main"; }
    
    
    public readonly stack: ObservableStack<ViewGenerator>;
    
    //! Declares com.lightningkite.butterflytemplate.vg.MainVG.mainStack
    public get mainStack(): (ObservableStack<ViewGenerator> | null) { return this.stack; }
    
    public readonly shouldBackBeShown: ObservableProperty<boolean>;
    
    
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = new MainXml();
        
        const view = xml.setup(dependency);
        
        
        xSwapViewBindStack<ViewGenerator>(xml.mainContent, dependency, this.stack);
        xTextViewBindString(xml.title, xObservablePropertyMap<Array<ViewGenerator>, string>(this.stack, (it: Array<ViewGenerator>): string => (iterLastOrNull(it)?.title ?? null) ?? ""));
        xViewBindVisible(xml.mainBack, this.shouldBackBeShown);
        xViewOnClick(xml.mainBack, undefined, (): void => {
                this.stack.pop();
        });
        
        return view;
    }
    
    public handleDeepLink(schema: string, host: string, path: string, params: Map<string, string>): void {
        this.stack.push(new ExampleContentVG());
    }
    
    public onBackPressed(): boolean { return HasBackActionDefaults.onBackPressed(this); }
}

