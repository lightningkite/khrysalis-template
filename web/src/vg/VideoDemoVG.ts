// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: vg/VideoDemoVG.kt
// Package: com.lightningkite.butterflytemplate.vg
import { Video, VideoReference, VideoRemoteUrl } from 'butterfly/dist/Video'
import { xImageViewBindVideoThumbnail } from 'butterfly/dist/observables/binding/ImageView.binding'
import { xActivityAccessRequestVideoCamera, xActivityAccessRequestVideoGallery, xActivityAccessRequestVideosGallery } from 'butterfly/dist/views/ViewDependency'
import { xVideoPlayerBind } from 'butterfly/dist/observables/binding/VideoPlayer.binding'
import { VideoDemoXml } from '../layout/VideoDemoXml'
import { runOrNull } from 'butterfly/dist/kotlin/Language'
import { ViewGenerator } from 'butterfly/dist/views/ViewGenerator'
import { StandardObservableProperty } from 'butterfly/dist/observables/StandardObservableProperty'

//! Declares com.lightningkite.butterflytemplate.vg.VideoDemoVG
export class VideoDemoVG extends ViewGenerator {
    public constructor() {
        super();
        this.currentVideo = new StandardObservableProperty<(Video | null)>(new VideoRemoteUrl("https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4"), undefined);
        this.timesPlayPressed = new StandardObservableProperty<number>(0, undefined);
    }
    
    
    
    //! Declares com.lightningkite.butterflytemplate.vg.VideoDemoVG.title
    public get title(): string { return "Video Demo"; }
    
    
    public readonly currentVideo: StandardObservableProperty<(Video | null)>;
    
    public readonly timesPlayPressed: StandardObservableProperty<number>;
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = new VideoDemoXml();
        
        const view = xml.setup(dependency);
        
        
        //--- Set Up xml.video
        xVideoPlayerBind(xml.video, this.currentVideo);
        
        //--- Set Up xml.thumbnail
        xImageViewBindVideoThumbnail(xml.thumbnail, this.currentVideo);
        
        //--- Set Up xml.play (overwritten on flow generation)
        xml.play.onclick = (_ev) => { _ev.stopPropagation(); 
            this.playClick();
        };
        
        //--- Set Up xml.gallery
        xml.gallery.onclick = (_ev) => { _ev.stopPropagation(); 
            xActivityAccessRequestVideoGallery(dependency, (it: File): void => {
                    this.currentVideo.value = new VideoReference(it);
            });
        };
        
        //--- Set Up xml.camera
        xml.camera.onclick = (_ev) => { _ev.stopPropagation(); 
            xActivityAccessRequestVideoCamera(dependency, undefined, (it: File): void => {
                    this.currentVideo.value = new VideoReference(it);
            });
        };
        
        //--- Set Up xml.galleryMulti
        xml.galleryMulti.onclick = (_ev) => { _ev.stopPropagation(); 
            xActivityAccessRequestVideosGallery(dependency, (it: Array<File>): void => {
                    const it_227 = (it[0] ?? null);
                    if (it_227 !== null) { 
                        this.currentVideo.value = new VideoReference(it_227);
                    }
            });
        };
        
        //--- Generate End (overwritten on flow generation)
        
        return view;
    }
    
    //--- Init
    
    
    
    //--- Actions
    
    public playClick(): void {
        this.timesPlayPressed.value = this.timesPlayPressed.value + 1;
        switch(this.timesPlayPressed.value % 3) {
            case 0:
            this.currentVideo.value = new VideoRemoteUrl("https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4")
            break;
            case 1:
            this.currentVideo.value = new VideoRemoteUrl("https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4")
            break;
            case 2:
            this.currentVideo.value = null
            break;
        }
        
    }
    
    //--- Action galleryClick
    
    public cameraClick(): void {
    }
    public galleryMultiClick(): void {
    }
    
    //--- Body End
}

