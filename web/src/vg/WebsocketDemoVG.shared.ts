// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: vg/WebsocketDemoVG.shared.kt
// Package: com.lightningkite.khrysalistemplate.vg
// FQImport: com.lightningkite.khrysalistemplate.vg.WebsocketDemoVG.generate.<anonymous>.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalistemplate.layouts.WebsocketDemoXml.setup TS setup
// FQImport: com.lightningkite.khrysalis.views.ViewGenerator TS ViewGenerator
// FQImport: com.lightningkite.khrysalis.net.HttpClient TS HttpClient
// FQImport: com.lightningkite.khrysalistemplate.vg.WebsocketDemoVG.generate.itemsList TS itemsList
// FQImport: com.lightningkite.khrysalistemplate.vg.WebsocketDemoVG.text TS text
// FQImport: com.lightningkite.khrysalis.net.ConnectedWebSocket TS ConnectedWebSocket
// FQImport: com.lightningkite.khrysalistemplate.vg.WebsocketDemoVG.generate.<anonymous>.cellView TS cellView
// FQImport: com.lightningkite.khrysalis.observables.binding.bindString>android.widget.EditText TS androidWidgetEditTextBindString
// FQImport: com.lightningkite.khrysalis.rx.until>io.reactivex.disposables.Disposable TS ioReactivexDisposablesDisposableUntil
// FQImport: com.lightningkite.khrysalis.net.HttpClient.webSocket TS webSocket
// FQImport: com.lightningkite.khrysalis.observables.map>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any> TS comLightningkiteKhrysalisObservablesObservablePropertyMap
// FQImport: com.lightningkite.khrysalis.observables.asObservableProperty>io.reactivex.Observable<kotlin.Any> TS ioReactivexObservableAsObservableProperty
// FQImport: com.lightningkite.khrysalistemplate.layouts.ComponentTextXml.label TS label
// FQImport: com.lightningkite.khrysalistemplate.vg.WebsocketDemoVG.generate.xml TS xml
// FQImport: com.lightningkite.khrysalistemplate.layouts.WebsocketDemoXml.input TS input
// FQImport: com.lightningkite.khrysalistemplate.vg.WebsocketDemoVG.generate.<anonymous>.observable TS observable
// FQImport: com.lightningkite.khrysalistemplate.vg.WebsocketDemoVG.generate.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalistemplate.layouts.ComponentTextXml TS ComponentTextXml
// FQImport: com.lightningkite.khrysalistemplate.layouts.WebsocketDemoXml TS WebsocketDemoXml
// FQImport: com.lightningkite.khrysalis.observables.binding.bind>androidx.recyclerview.widget.RecyclerView TS androidxRecyclerviewWidgetRecyclerViewBind
// FQImport: com.lightningkite.khrysalis.net.ConnectedWebSocket.read TS read
// FQImport: com.lightningkite.khrysalistemplate.layouts.ComponentTextXml.setup TS setup
// FQImport: com.lightningkite.khrysalis.net.WebSocketFrame TS WebSocketFrame
// FQImport: com.lightningkite.khrysalistemplate.vg.WebsocketDemoVG.generate.<anonymous>.cellXml TS cellXml
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty TS StandardObservableProperty
// FQImport: com.lightningkite.khrysalis.rx.removed>android.view.View TS getAndroidViewViewRemoved
// FQImport: com.lightningkite.khrysalistemplate.vg.WebsocketDemoVG.socket TS socket
// FQImport: com.lightningkite.khrysalistemplate.layouts.WebsocketDemoXml.submit TS submit
// FQImport: com.lightningkite.khrysalistemplate.layouts.WebsocketDemoXml.items TS items
// FQImport: com.lightningkite.khrysalis.observables.binding.bindString>android.widget.TextView TS androidWidgetTextViewBindString
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty.value TS value
// FQImport: com.lightningkite.khrysalistemplate.vg.WebsocketDemoVG.generate.dependency TS dependency
// FQImport: com.lightningkite.khrysalistemplate.vg.WebsocketDemoVG.generate.view TS view
// FQImport: com.lightningkite.khrysalis.net.WebSocketFrame.text TS text
import { map as rxMap, publishReplay as rxPublishReplay, refCount as rxRefCount, switchMap as rxSwitchMap, take as rxTake } from 'rxjs/operators'
import { WebSocketFrame } from 'khrysalis/dist/net/WebSocketFrame.shared'
import { androidWidgetEditTextBindString } from 'khrysalis/dist/observables/binding/EditText.binding.actual'
import { comLightningkiteKhrysalisObservablesObservablePropertyMap } from 'khrysalis/dist/observables/TransformedObservableProperty.shared'
import { Observable } from 'rxjs'
import { getAndroidViewViewRemoved, ioReactivexDisposablesDisposableUntil } from 'khrysalis/dist/rx/DisposeCondition.actual'
import { WebsocketDemoXml } from '../layout/WebsocketDemoXml'
import { ComponentTextXml } from '../layout/ComponentTextXml'
import { StandardObservableProperty } from 'khrysalis/dist/observables/StandardObservableProperty.shared'
import { ioReactivexObservableAsObservableProperty } from 'khrysalis/dist/observables/EventToObservableProperty.shared'
import { ViewGenerator } from 'khrysalis/dist/views/ViewGenerator.shared'
import { ConnectedWebSocket } from 'khrysalis/dist/net/ConnectedWebSocket.actual'
import { androidWidgetTextViewBindString } from 'khrysalis/dist/observables/binding/TextView.binding.actual'
import { HttpClient } from 'khrysalis/dist/net/HttpClient.actual'
import { androidxRecyclerviewWidgetRecyclerViewBind } from 'khrysalis/dist/observables/binding/RecyclerView.binding.actual'

//! Declares com.lightningkite.khrysalistemplate.vg.WebsocketDemoVG
export class WebsocketDemoVG extends ViewGenerator {
    public constructor() {
        super();
        this.socket = HttpClient.INSTANCE.webSocket("wss://echo.websocket.org").pipe(rxPublishReplay(1)).pipe(rxRefCount());
        this.text = new StandardObservableProperty("", undefined);
    }
    
    
    
    //! Declares com.lightningkite.khrysalistemplate.vg.WebsocketDemoVG.title
    public get title(): string { return "Websocket Demo"; }
    
    
    public readonly socket: Observable<ConnectedWebSocket>;
    
    public readonly text: StandardObservableProperty<string>;
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = new WebsocketDemoXml();
        
        const view = xml.setup(dependency);
        
        
        //--- Set Up xml.items
        const itemsList = [] as Array<WebSocketFrame>;
        
        androidxRecyclerviewWidgetRecyclerViewBind(xml.items, ioReactivexObservableAsObservableProperty(this.socket.pipe(rxSwitchMap((it) => it.read)).pipe(rxMap((it) => {
                            console.log("Adding item");
                            itemsList.push(it);
                            while (itemsList.length > 20) {
                                itemsList.splice(0, 1);
                            }
                            return itemsList as Array<WebSocketFrame>;
            })), itemsList), new WebSocketFrame(undefined, undefined), (observable) => {
                //--- Make Subview For xml.items (overwritten on flow generation)
                const cellXml = new ComponentTextXml();
                
                const cellView = cellXml.setup(dependency);
                
                
                //--- Set Up cellXml.label (overwritten on flow generation)
                androidWidgetTextViewBindString(cellXml.label, comLightningkiteKhrysalisObservablesObservablePropertyMap(observable, (it) => it.text ?? "---"));
                //--- End Make Subview For xml.items (overwritten on flow generation)
                return cellView;
        });
        
        //--- Set Up xml.input
        androidWidgetEditTextBindString(xml.input, this.text);
        
        //--- Set Up xml.submit
        xml.submit.addEventListener("onclick", (_ev) => { _ev.stopPropagation(); 
                ioReactivexDisposablesDisposableUntil(this.socket.pipe(rxTake(1)).subscribe((it) => {
                            it.next(new WebSocketFrame(undefined, this.text.value))
                }, undefined, undefined), getAndroidViewViewRemoved(xml.submit));
        });
        
        //--- Generate End (overwritten on flow generation)
        
        return view;
    }
    
    //--- Init
    
    
    
    //--- Actions
    
    
    public submitClick(): void {
    }
    
    //--- Body End
}

