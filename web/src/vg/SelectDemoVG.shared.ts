// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: vg/SelectDemoVG.shared.kt
// Package: com.lightningkite.khrysalistemplate.vg
// FQImport: com.lightningkite.khrysalistemplate.vg.HttpDemoVG TS HttpDemoVG
// FQImport: com.lightningkite.khrysalis.views.EntryPoint TS EntryPoint
// FQImport: com.lightningkite.khrysalistemplate.vg.PreviewVG TS PreviewVG
// FQImport: com.lightningkite.khrysalistemplate.vg.ExampleContentVG TS ExampleContentVG
// FQImport: com.lightningkite.khrysalistemplate.vg.SelectDemoVG.options TS options
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDemoVG TS FloatingHexagonsDemoVG
// FQImport: kotlin.collections.Map TS Map
// FQImport: com.lightningkite.khrysalistemplate.vg.MarginTestsVG TS MarginTestsVG
// FQImport: com.lightningkite.khrysalistemplate.layouts.ComponentTestXml TS ComponentTestXml
// FQImport: com.lightningkite.khrysalistemplate.vg.ExternalTestVG TS ExternalTestVG
// FQImport: com.lightningkite.khrysalis.observables.ConstantObservableProperty TS ConstantObservableProperty
// FQImport: com.lightningkite.khrysalistemplate.vg.LoadImageDemoVG TS LoadImageDemoVG
// FQImport: com.lightningkite.khrysalis.observables.binding.bindText>android.widget.TextView TS androidWidgetTextViewBindText
// FQImport: com.lightningkite.khrysalis.views.ViewGenerator.title TS title
// FQImport: com.lightningkite.khrysalistemplate.vg.SegmentedControlDemoVG TS SegmentedControlDemoVG
// FQImport: com.lightningkite.khrysalistemplate.layouts.SelectDemoXml TS SelectDemoXml
// FQImport: com.lightningkite.khrysalistemplate.vg.SelectDemoVG.generate.xml TS xml
// FQImport: com.lightningkite.khrysalistemplate.vg.PongDemoVG TS PongDemoVG
// FQImport: com.lightningkite.khrysalis.views.ViewGenerator TS ViewGenerator
// FQImport: com.lightningkite.khrysalistemplate.layouts.ComponentTestXml.label TS label
// FQImport: com.lightningkite.khrysalistemplate.layouts.ComponentTestXml.button TS button
// FQImport: com.lightningkite.khrysalistemplate.vg.ViewPagerDemoVG TS ViewPagerDemoVG
// FQImport: com.lightningkite.khrysalistemplate.vg.SelectDemoVG.selectVG TS selectVG
// FQImport: com.lightningkite.khrysalistemplate.vg.LocationDemoVG TS LocationDemoVG
// FQImport: com.lightningkite.khrysalistemplate.vg.SliderDemoVG TS SliderDemoVG
// FQImport: com.lightningkite.khrysalistemplate.vg.MultipleDemoVG TS MultipleDemoVG
// FQImport: com.lightningkite.khrysalistemplate.layouts.ComponentTestXml.setup TS setup
// FQImport: com.lightningkite.khrysalis.observables.ObservableStack.push TS push
// FQImport: com.lightningkite.khrysalis.views.EntryPoint TS EntryPointDefaults
// FQImport: com.lightningkite.khrysalis.observables.ObservableStack TS ObservableStack
// FQImport: com.lightningkite.khrysalistemplate.vg.ControlsDemoVG TS ControlsDemoVG
// FQImport: com.lightningkite.khrysalistemplate.vg.DrawableDemoVG TS DrawableDemoVG
// FQImport: com.lightningkite.khrysalistemplate.vg.SelectDemoVG.generate.<anonymous>.view TS view
// FQImport: com.lightningkite.khrysalistemplate.vg.DateRangeDemoVG TS DateRangeDemoVG
// FQImport: com.lightningkite.khrysalistemplate.vg.SelectDemoVG.generate.<anonymous>.obs TS obs
// FQImport: com.lightningkite.khrysalistemplate.vg.DateButtonDemoVG TS DateButtonDemoVG
// FQImport: com.lightningkite.khrysalistemplate.layouts.SelectDemoXml.list TS list
// FQImport: com.lightningkite.khrysalistemplate.vg.SelectDemoVG.generate.<anonymous>.xml TS xml
// FQImport: com.lightningkite.khrysalistemplate.vg.LoginDemoVG TS LoginDemoVG
// FQImport: com.lightningkite.khrysalistemplate.vg.SelectDemoVG.generate.dependency TS dependency
// FQImport: com.lightningkite.khrysalis.observables.binding.bind>androidx.recyclerview.widget.RecyclerView TS androidxRecyclerviewWidgetRecyclerViewBind
// FQImport: com.lightningkite.khrysalistemplate.vg.SelectDemoVG.generate.<anonymous>.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalistemplate.vg.SelectDemoVG.stack TS stack
// FQImport: com.lightningkite.khrysalistemplate.layouts.SelectDemoXml.setup TS setup
// FQImport: com.lightningkite.khrysalistemplate.vg.SelectDemoVG.generate.view TS view
// FQImport: com.lightningkite.khrysalistemplate.vg.WebsocketDemoVG TS WebsocketDemoVG
// FQImport: com.lightningkite.khrysalistemplate.vg.SelectDemoVG.selectVG.viewGenerator TS viewGenerator
// FQImport: com.lightningkite.khrysalis.observables.ObservableProperty.value TS value
import { ExternalTestVG } from './ExternalTestVG.shared'
import { androidWidgetTextViewBindText } from 'khrysalis/dist/observables/binding/TextView.binding.actual'
import { SliderDemoVG } from './SliderDemoVG.shared'
import { DrawableDemoVG } from './DrawableDemoVG.shared'
import { PreviewVG } from './PreviewVG.shared'
import { EntryPoint, EntryPointDefaults } from 'khrysalis/dist/views/EntryPoint.shared'
import { MultipleDemoVG } from './MultipleDemoVG.shared'
import { SegmentedControlDemoVG } from './SegmentedControlDemoVG.shared'
import { PongDemoVG } from './PongDemoVG.shared'
import { DateButtonDemoVG } from './DateButtonDemoVG.shared'
import { LoadImageDemoVG } from './LoadImageDemoVG.shared'
import { MarginTestsVG } from './MarginTestVG.shared'
import { ControlsDemoVG } from './ControlsDemoVG.shared'
import { DateRangeDemoVG } from './DateRangeDemoVG.shared'
import { HttpDemoVG } from './HttpDemoVG.shared'
import { androidxRecyclerviewWidgetRecyclerViewBind } from 'khrysalis/dist/observables/binding/RecyclerView.binding.actual'
import { SelectDemoXml } from '../layout/SelectDemoXml'
import { WebsocketDemoVG } from './WebsocketDemoVG.shared'
import { ComponentTestXml } from '../layout/ComponentTestXml'
import { ExampleContentVG } from './ExampleContentVG.shared'
import { LocationDemoVG } from './LocationDemoVG.shared'
import { ConstantObservableProperty } from 'khrysalis/dist/observables/ConstantObservableProperty.shared'
import { ViewPagerDemoVG } from './ViewPagerDemoVG.shared'
import { ViewGenerator } from 'khrysalis/dist/views/ViewGenerator.shared'
import { LoginDemoVG } from './LoginDemoVG.shared'
import { FloatingHexagonsDemoVG } from './FloatingHexagonsDemoVG.shared'
import { ObservableStack } from 'khrysalis/dist/observables/ObservableStack.shared'

//! Declares com.lightningkite.khrysalistemplate.vg.SelectDemoVG
export class SelectDemoVG extends ViewGenerator implements EntryPoint {
    public static implementsInterfaceComLightningkiteKhrysalisViewsEntryPoint = true;
    public readonly stack: ObservableStack<ViewGenerator>;
    public constructor(stack: ObservableStack<ViewGenerator>) {
        super();
        this.stack = stack;
        this.options = [new WebsocketDemoVG(), new HttpDemoVG(), new ExternalTestVG(), new PongDemoVG(), new FloatingHexagonsDemoVG(), new MarginTestsVG(), new MultipleDemoVG(), new DateButtonDemoVG(), new LocationDemoVG(), new LoadImageDemoVG(), new ControlsDemoVG(), new ExampleContentVG(), new ViewPagerDemoVG(this.stack), new SegmentedControlDemoVG(), new SliderDemoVG(), new DateRangeDemoVG(), new LoginDemoVG(this.stack), new DrawableDemoVG(), new PreviewVG()];
    }
    
    //! Declares com.lightningkite.khrysalistemplate.vg.SelectDemoVG.title
    public get title(): string { return "Select Demo"; }
    
    
    public readonly options: Array<ViewGenerator>;
    
    
    public selectVG(viewGenerator: ViewGenerator): void {
        this.stack.push(viewGenerator);
    }
    
    public generate(dependency: Window): HTMLElement {
        const xml = new SelectDemoXml();
        
        const view = xml.setup(dependency);
        
        
        androidxRecyclerviewWidgetRecyclerViewBind(xml.list, new ConstantObservableProperty(this.options), this.options[0], (obs) => {
                const xml = new ComponentTestXml();
                
                const view = xml.setup(dependency);
                
                androidWidgetTextViewBindText(xml.label, obs, (it) => it.title);
                xml.button.onclick = (_ev) => { _ev.stopPropagation(); 
                    this.selectVG(obs.value);
                };
                return view;
        });
        
        return view;
    }
    
    //! Declares com.lightningkite.khrysalistemplate.vg.SelectDemoVG.mainStack
    public get mainStack(): (ObservableStack<ViewGenerator> | null) { return this.stack; }
    
    public handleDeepLink(schema: string, host: string, path: string, params: Map<string, string>): void { return EntryPointDefaults.handleDeepLink(this, schema, host, path, params); }
    public onBackPressed(): boolean { return EntryPointDefaults.onBackPressed(this); }
}

