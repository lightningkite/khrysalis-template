// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: vg/MultipleDemoVG.shared.kt
// Package: com.lightningkite.khrysalistemplate.vg
// FQImport: com.lightningkite.khrysalistemplate.layouts.ComponentTestXml.setup TS setup
// FQImport: com.lightningkite.khrysalistemplate.layouts.ComponentTextXml.label TS label
// FQImport: com.lightningkite.khrysalistemplate.vg.MultipleDemoVG.generate.<anonymous>.<anonymous>.obs TS obs
// FQImport: com.lightningkite.khrysalistemplate.vg.MultipleDemoVG.generate.<anonymous>.<anonymous>.cellXml TS cellXml
// FQImport: com.lightningkite.khrysalistemplate.layouts.MultipleDemoXml TS MultipleDemoXml
// FQImport: com.lightningkite.khrysalistemplate.vg.MultipleDemoVG.generate.view TS view
// FQImport: com.lightningkite.khrysalistemplate.vg.MultipleDemoVG.generate.<anonymous>.handler TS handler
// FQImport: com.lightningkite.khrysalistemplate.layouts.ComponentTestXml TS ComponentTestXml
// FQImport: com.lightningkite.khrysalis.observables.ConstantObservableProperty TS ConstantObservableProperty
// FQImport: com.lightningkite.khrysalistemplate.layouts.ComponentTextXml TS ComponentTextXml
// FQImport: com.lightningkite.khrysalis.views.ViewGenerator TS ViewGenerator
// FQImport: com.lightningkite.khrysalistemplate.vg.MultipleDemoVG.generate.dependency TS dependency
// FQImport: com.lightningkite.khrysalistemplate.layouts.ComponentTestXml.label TS label
// FQImport: com.lightningkite.khrysalistemplate.layouts.ComponentTextXml.setup TS setup
// FQImport: com.lightningkite.khrysalistemplate.vg.MultipleDemoVG.generate.xml TS xml
// FQImport: com.lightningkite.khrysalistemplate.vg.MultipleDemoVG.generate.<anonymous>.<anonymous>.cellView TS cellView
// FQImport: com.lightningkite.khrysalistemplate.vg.MultipleDemoVG.data TS data
// FQImport: com.lightningkite.khrysalistemplate.layouts.MultipleDemoXml.list TS list
// FQImport: com.lightningkite.khrysalistemplate.layouts.MultipleDemoXml.setup TS setup
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.handle TS handle
// FQImport: com.lightningkite.khrysalistemplate.vg.MultipleDemoVG.generate.<anonymous>.<anonymous>.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.observables.binding.bindString>android.widget.TextView TS androidWidgetTextViewBindString
// FQImport: com.lightningkite.khrysalis.observables.map>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any> TS comLightningkiteKhrysalisObservablesObservablePropertyMap
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti>androidx.recyclerview.widget.RecyclerView TS recyclerViewBindMultiType
import { ComponentTextXml } from '../layout/ComponentTextXml'
import { ComponentTestXml } from '../layout/ComponentTestXml'
import { ViewGenerator } from 'khrysalis/dist/views/ViewGenerator.shared'
import { comLightningkiteKhrysalisObservablesObservablePropertyMap } from 'khrysalis/dist/observables/TransformedObservableProperty.shared'
import { MultipleDemoXml } from '../layout/MultipleDemoXml'
import { androidWidgetTextViewBindString } from 'khrysalis/dist/observables/binding/TextView.binding.actual'
import { recyclerViewBindMultiType } from 'khrysalis/dist/observables/binding/RecyclerView.binding.actual'
import { ConstantObservableProperty } from 'khrysalis/dist/observables/ConstantObservableProperty.shared'

//! Declares com.lightningkite.khrysalistemplate.vg.MultipleDemoVG
export class MultipleDemoVG extends ViewGenerator {
    public constructor() {
        super();
        this.data = [1, 2, "3", 4, "5", undefined, "Test", 6] as Array<any>;
    }
    
    //! Declares com.lightningkite.khrysalistemplate.vg.MultipleDemoVG.title
    public get title(): string { return "Multiple List Demo"; }
    
    
    public readonly data: Array<any>;
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = new MultipleDemoXml();
        
        const view = xml.setup(dependency);
        
        
        recyclerViewBindMultiType(xml.list, dependency, new ConstantObservableProperty(this.data), (handler) => {
                handler.handle([Number], 0, (obs) => {
                        const cellXml = new ComponentTestXml();
                        
                        const cellView = cellXml.setup(dependency);
                        
                        androidWidgetTextViewBindString(cellXml.label, comLightningkiteKhrysalisObservablesObservablePropertyMap(obs, (it) => `The number ${it}`));
                        return cellView;
                });
                handler.handle([String], "", (obs) => {
                        const cellXml = new ComponentTestXml();
                        
                        const cellView = cellXml.setup(dependency);
                        
                        androidWidgetTextViewBindString(cellXml.label, comLightningkiteKhrysalisObservablesObservablePropertyMap(obs, (it) => `The string '${it}'`));
                        return cellView;
                });
                handler.handle([undefined], undefined, (obs) => {
                        const cellXml = new ComponentTextXml();
                        
                        const cellView = cellXml.setup(dependency);
                        
                        cellXml.label.innerText = "-----";
                        return cellView;
                });
        });
        
        return view;
    }
}

