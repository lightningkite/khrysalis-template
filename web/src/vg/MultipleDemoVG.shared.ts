// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: vg/MultipleDemoVG.shared.kt
// Package: com.lightningkite.khrysalistemplate.vg
import { ComponentTextXml } from '../layout/ComponentTextXml'
import { ComponentTestXml } from '../layout/ComponentTestXml'
import { ViewGenerator } from 'khrysalis/dist/views/ViewGenerator.shared'
import { RVTypeHandler, recyclerViewBindMultiType } from 'khrysalis/dist/observables/binding/RecyclerView.binding.actual'
import { MultipleDemoXml } from '../layout/MultipleDemoXml'
import { xTextViewBindString } from 'khrysalis/dist/observables/binding/TextView.binding.actual'
import { setViewText } from 'khrysalis/dist/views/ViewWithText.ext.actual'
import { xObservablePropertyMap } from 'khrysalis/dist/observables/TransformedObservableProperty.shared'
import { ConstantObservableProperty } from 'khrysalis/dist/observables/ConstantObservableProperty.shared'
import { ObservableProperty } from 'khrysalis/dist/observables/ObservableProperty.shared'

//! Declares com.lightningkite.khrysalistemplate.vg.MultipleDemoVG
export class MultipleDemoVG extends ViewGenerator {
    public constructor() {
        super();
        this.data = [1, 2, "3", 4, "5", undefined, "Test", 6] as Array<any>;
    }
    
    //! Declares com.lightningkite.khrysalistemplate.vg.MultipleDemoVG.title
    public get title(): string { return "Multiple List Demo"; }
    
    
    public readonly data: Array<any>;
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = new MultipleDemoXml();
        
        const view = xml.setup(dependency);
        
        
        recyclerViewBindMultiType(xml.list, dependency, new ConstantObservableProperty<Array<any>>(this.data), (handler: RVTypeHandler): void => {
                handler.handle<number>([Number], 0, (obs: ObservableProperty<number>): HTMLElement => {
                        const cellXml = new ComponentTestXml();
                        
                        const cellView = cellXml.setup(dependency);
                        
                        xTextViewBindString(cellXml.label, xObservablePropertyMap<number, string>(obs, (it: number): string => `The number ${it}`));
                        return cellView;
                });
                handler.handle<string>([String], "", (obs: ObservableProperty<string>): HTMLElement => {
                        const cellXml = new ComponentTestXml();
                        
                        const cellView = cellXml.setup(dependency);
                        
                        xTextViewBindString(cellXml.label, xObservablePropertyMap<string, string>(obs, (it: string): string => `The string '${it}'`));
                        return cellView;
                });
                handler.handle<void>([undefined], undefined, (obs: ObservableProperty<void>): HTMLElement => {
                        const cellXml = new ComponentTextXml();
                        
                        const cellView = cellXml.setup(dependency);
                        
                        setViewText(cellXml.label, "-----");
                        return cellView;
                });
        });
        
        return view;
    }
}

