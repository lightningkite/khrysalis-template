// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: vg/FloatingHexagonsDemoVG.shared.kt
// Package: com.lightningkite.khrysalistemplate.vg
// FQImport: com.lightningkite.khrysalistemplate.vg.Hexagon.centerY TS centerY
// FQImport: com.lightningkite.khrysalistemplate.vg.Hexagon.move.y TS y
// FQImport: com.lightningkite.khrysalistemplate.vg.Hexagon.radius TS radius
// FQImport: android.graphics.Paint.textSize TS textSize
// FQImport: android.graphics.Paint.color TS color
// FQImport: com.lightningkite.khrysalistemplate.vg.Hexagon.draw.i TS i
// FQImport: com.lightningkite.khrysalis.views.ViewGenerator TS ViewGenerator
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.sizeThatFitsWidth.height TS height
// FQImport: com.lightningkite.khrysalistemplate.vg.Hexagon.paint TS paint
// FQImport: com.lightningkite.khrysalistemplate.vg.Hexagon.draw.angle2 TS angle2
// FQImport: android.graphics.Paint.strokeWidth TS strokeWidth
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.draw.height TS height
// FQImport: com.lightningkite.khrysalistemplate.vg.Hexagon.draw.cornerY1 TS cornerY1
// FQImport: com.lightningkite.khrysalistemplate.vg.Hexagon.draw.cornerY2 TS cornerY2
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.frame.<anonymous>.loc TS loc
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.animationTime TS animationTime
// FQImport: android.util.DisplayMetrics TS DisplayMetrics
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.backgroundPaint TS backgroundPaint
// FQImport: com.lightningkite.khrysalistemplate.layouts.FloatingHexagonsDemoXml TS FloatingHexagonsDemoXml
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.location TS location
// FQImport: android.graphics.Paint.alpha TS alpha
// FQImport: com.lightningkite.khrysalistemplate.vg.Hexagon.draw.angle1 TS angle1
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.frame.time TS time
// FQImport: com.lightningkite.khrysalistemplate.vg.Hexagon.move.x TS x
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.moveToPos.x TS x
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.moveToPos TS moveToPos
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.draw.tempList TS tempList
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.moveTo TS moveTo
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.draw.canvas TS canvas
// FQImport: com.lightningkite.khrysalistemplate.vg.Hexagon.draw TS draw
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.sizeThatFitsHeight.width TS width
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.onTouchDown.x TS x
// FQImport: com.lightningkite.khrysalistemplate.vg.Hexagon.moveX.x TS x
// FQImport: com.lightningkite.khrysalistemplate.vg.Hexagon TS Hexagon
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDemoVG.generate.dependency TS dependency
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.frame.<anonymous>.<anonymous>.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalistemplate.vg.Hexagon.moveX TS moveX
// FQImport: com.lightningkite.khrysalistemplate.vg.Hexagon.degreesToRadians TS degreesToRadians
// FQImport: com.lightningkite.khrysalis.views.draw.newLinearGradient TS newLinearGradient
// FQImport: com.lightningkite.khrysalis.views.CustomViewDelegate TS CustomViewDelegate
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.frame.<anonymous>.<anonymous>.delta TS delta
// FQImport: android.graphics.Shader.TileMode.REPEAT TS REPEAT
// FQImport: com.lightningkite.khrysalistemplate.vg.Hexagon.centerX TS centerX
// FQImport: android.graphics.Paint.shader TS shader
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDemoVG.generate.view TS view
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.draw.width TS width
// FQImport: com.lightningkite.khrysalistemplate.vg.Hexagon.draw.cornerX2 TS cornerX2
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.moveToPos.time TS time
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDemoVG.generate.xml TS xml
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.draw.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.hexagonPaint TS hexagonPaint
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.hexagons TS hexagons
// FQImport: com.lightningkite.khrysalistemplate.vg.Hexagon.draw.canvas TS canvas
// FQImport: com.lightningkite.khrysalistemplate.vg.Hexagon.layer TS layer
// FQImport: android.graphics.Shader.TileMode TS TileMode
// FQImport: android.graphics.Paint TS Paint
// FQImport: com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate.frame.<anonymous>.<anonymous>.moveTo TS moveTo
// FQImport: com.lightningkite.khrysalistemplate.layouts.FloatingHexagonsDemoXml.setup TS setup
// FQImport: com.lightningkite.khrysalistemplate.vg.Hexagon.draw.cornerX1 TS cornerX1
// FQImport: android.graphics.Shader TS Shader
import { Paint } from 'khrysalis/dist/views/draw/Paint.actual'
import { ViewGenerator } from 'khrysalis/dist/views/ViewGenerator.shared'
import { DisplayMetrics } from 'khrysalis/dist/views/DisplayMetrics.actual'
import { RandomInstance } from 'khrysalis/dist/Random.actual'
import { Shader, newLinearGradient } from 'khrysalis/dist/views/draw/LinearGradient.actual'
import { pathFromLTRB } from 'khrysalis/dist/views/draw/Path.actual'
import { CustomViewDelegate } from 'khrysalis/dist/views/CustomViewDelegate.shared'
import { numberToColor } from 'khrysalis/dist/views/Colors.actual'
import { FloatingHexagonsDemoXml } from '../layout/FloatingHexagonsDemoXml'
import { NumberRange } from 'khrysalis/dist/Kotlin'

//! Declares com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDemoVG
export class FloatingHexagonsDemoVG extends ViewGenerator {
    public constructor() {
        super();
    }
    
    
    //! Declares com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDemoVG.title
    public get title(): string { return "Floating Hexagons Test"; }
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = new FloatingHexagonsDemoXml();
        
        const view = xml.setup(dependency);
        
        return view;
    }
}

//! Declares com.lightningkite.khrysalistemplate.vg.FloatingHexagonsDelegate
export class FloatingHexagonsDelegate extends CustomViewDelegate {
    public constructor() {
        super();
        this.backgroundPaint = Paint.constructor();
        this.hexagonPaint = Paint.constructor();
        this.hexagonPaint.strokeWidth = 4;
        this.hexagonPaint.color = numberToColor(0xFFFFFFFF);
        this.location = null;
        this.moveTo = null;
        this.animationTime = 0;
        this.hexagons = null;
        this.backgroundPaint.color = numberToColor(0xFFFFFFFF);
        this.backgroundPaint.textSize = 12;
    }
    
    
    
    public readonly backgroundPaint: Paint;
    
    public readonly hexagonPaint: Paint;
    
    
    public location: (number | null);
    
    public moveTo: (number | null);
    
    public animationTime: number;
    
    
    public hexagons: (Array<Hexagon> | null);
    
    
    public frame(time: number): void {
        const temp32 = this.location;
        if(temp32 !== null) ((loc) => ((_it)=>{
                    if(_it === null) return null;
                    return ((moveTo) => (() => {if (Math.abs(loc - moveTo) > .01 && this.animationTime > 0) {
                                    const delta = (moveTo - loc) / this.animationTime;
                                    
                                    const temp39 = this.hexagons;
                                    if(temp39 !== null) for(const _x of temp39) { 
                                        const it = _x;
                                        it.moveX(delta);
                                    };
                                    this.location = loc + delta;
                                    return this.animationTime = this.animationTime - time;
                    }})())(_it)
        })(this.moveTo))(temp32);
    }
    
    
    
    public draw(canvas: CanvasRenderingContext2D, width: number, height: number, displayMetrics: DisplayMetrics): void {
        if (this.hexagons.equals(null)) {
            const tempList: Array<Hexagon> = [];
            
            for (const i of new NumberRange(0, 7)) {
                tempList.push(new Hexagon((RandomInstance.random() * width * 1.5), (RandomInstance.random() * height), ((RandomInstance.random() + 0.2) * width / 4), (RandomInstance.random_int31() % (5 - 1) + 1), this.hexagonPaint));
            }
            this.hexagons = Array.from(tempList);
        }
        if (this.location === null) {
            this.location = width / 2;
            this.moveTo = width / 2;
        }
        if (this.backgroundPaint.shader.equals(null)) {
            this.backgroundPaint.shader = newLinearGradient(width, 0, 0, height, [numberToColor(0xFF773DBD), numberToColor(0xFF1226AA)], [.25, 1], Shader.TileMode.REPEAT);
        }
        canvas.clip(pathFromLTRB(0, 0, width, height)); this.backgroundPaint.complete(canvas);
        const temp48 = this.hexagons;
        if(temp48 !== null) for(const _x of temp48) { 
            const it = _x;
            it.draw(canvas);
        };
    }
    
    public moveToPos(x: number, time: number): void {
        this.moveTo = x;
        this.animationTime = time;
    }
    
    public onTouchDown(id: number, x: number, y: number, width: number, height: number): boolean {
        this.moveToPos(x, 10);
        return true;
    }
    
    public onTouchMove(id: number, x: number, y: number, width: number, height: number): boolean {
        return true;
    }
    
    public onTouchUp(id: number, x: number, y: number, width: number, height: number): boolean {
        return true;
    }
    
    
    public generateAccessibilityView(): (HTMLElement | null) { return null; }
    
    public sizeThatFitsWidth(width: number, height: number): number {
        return height;
    }
    
    public sizeThatFitsHeight(width: number, height: number): number {
        return width;
    }
}


//! Declares com.lightningkite.khrysalistemplate.vg.Hexagon
export class Hexagon {
    public centerX: number;
    public centerY: number;
    public readonly radius: number;
    public readonly layer: number;
    public readonly paint: Paint;
    public constructor(centerX: number, centerY: number, radius: number, layer: number, paint: Paint) {
        this.centerX = centerX;
        this.centerY = centerY;
        this.radius = radius;
        this.layer = layer;
        this.paint = paint;
        console.log(this.layer);
        this.degreesToRadians = 3.14159 / 180;
    }
    
    
    
    
    public draw(canvas: CanvasRenderingContext2D): void {
        for (const i of new NumberRange(0, 5)) {
            const angle1: number = (i * 60) * this.degreesToRadians;
            
            const angle2: number = (i * 60 + 60) * this.degreesToRadians;
            
            const cornerX1 = Math.sin(angle1) * this.radius + this.centerX;
            
            const cornerY1 = (Math.cos(angle1) * 1.1) * this.radius + this.centerY;
            
            const cornerX2 = Math.sin(angle2) * this.radius + this.centerX;
            
            const cornerY2 = (Math.cos(angle2) * 1.1) * this.radius + this.centerY;
            
            this.paint.alpha = 200 / this.layer;
            canvas.moveTo(cornerX1, cornerY1); canvas.lineTo(cornerX2, cornerY2); this.paint.complete(canvas);
        }
    }
    
    public move(x: number, y: number): void {
        this.centerX = this.centerX + x / this.layer;
        this.centerY = this.centerY + y / this.layer;
    }
    
    public moveX(x: number): void {
        this.centerX = this.centerX + x / this.layer;
    }
    
    private readonly degreesToRadians: number;
    
}

