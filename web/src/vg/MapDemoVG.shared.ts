// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: vg/MapDemoVG.shared.kt
// Package: com.lightningkite.khrysalistemplate.vg
import { androidWidgetEditTextBindString } from 'khrysalis/dist/observables/binding/EditText.binding.actual'
import { comLightningkiteKhrysalisObservablesObservablePropertyMap } from 'khrysalis/dist/observables/TransformedObservableProperty.shared'
import { Observable, SubscriptionLike } from 'rxjs'
import { comLightningkiteKhrysalisAndroidActivityAccessGeocode } from 'khrysalis/dist/location/Geocoding.actual'
import { getAndroidViewViewRemoved, ioReactivexDisposablesDisposableUntil } from 'khrysalis/dist/rx/DisposeCondition.actual'
import { ObservableProperty } from 'khrysalis/dist/observables/ObservableProperty.shared'
import { debounceTime as rxDebounceTime, distinctUntilChanged as rxDistinctUntilChanged, flatMap as rxFlatMap } from 'rxjs/operators'
import { MapDemoXml } from '../layout/MapDemoXml'
import { ComponentTextXml } from '../layout/ComponentTextXml'
import { StandardObservableProperty } from 'khrysalis/dist/observables/StandardObservableProperty.shared'
import { GeoAddress } from 'khrysalis/dist/location/GeoAddress.shared'
import { getComLightningkiteKhrysalisObservablesObservablePropertyObservableNN } from 'khrysalis/dist/observables/ObservableProperty.ext.shared'
import { ViewGenerator } from 'khrysalis/dist/views/ViewGenerator.shared'
import { GeoCoordinate } from 'khrysalis/dist/location/GeoCoordinate.shared'
import { androidWidgetTextViewBindString } from 'khrysalis/dist/observables/binding/TextView.binding.actual'
import { comGoogleAndroidGmsMapsMapViewBindSelect } from 'khrysalis-maps-google/dist/MapView.bind.actual'
import { androidxRecyclerviewWidgetRecyclerViewBind } from 'khrysalis/dist/observables/binding/RecyclerView.binding.actual'

//! Declares com.lightningkite.khrysalistemplate.vg.MapDemoVG
export class MapDemoVG extends ViewGenerator {
    public constructor() {
        super();
        this.text = new StandardObservableProperty<string>("", undefined);
        this.position = new StandardObservableProperty<(GeoCoordinate | null)>(null, undefined);
        this.options = new StandardObservableProperty<Array<GeoAddress>>([], undefined);
    }
    
    //! Declares com.lightningkite.khrysalistemplate.vg.MapDemoVG.title
    public get title(): string { return "Map Demo"; }
    
    
    public readonly text: StandardObservableProperty<string>;
    
    public readonly position: StandardObservableProperty<(GeoCoordinate | null)>;
    
    public readonly options: StandardObservableProperty<Array<GeoAddress>>;
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = new MapDemoXml();
        
        const view = xml.setup(dependency);
        
        
        comGoogleAndroidGmsMapsMapViewBindSelect(xml.map, dependency, this.position, undefined, undefined, undefined);
        androidWidgetEditTextBindString(xml.select, this.text);
        androidxRecyclerviewWidgetRecyclerViewBind<GeoAddress>(xml.options, this.options, new GeoAddress(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined), (obs: ObservableProperty<GeoAddress>): HTMLElement => {
                const xml = new ComponentTextXml();
                
                const view = xml.setup(dependency);
                
                androidWidgetTextViewBindString(xml.label, comLightningkiteKhrysalisObservablesObservablePropertyMap<GeoAddress, string>(obs, (it: GeoAddress): string => it.oneLine(undefined, undefined)));
                xml.xmlRoot.onclick = (_ev) => { _ev.stopPropagation(); 
                    this.position.value = obs.value.coordinate;
                };
                return view;
        });
        
        ioReactivexDisposablesDisposableUntil<SubscriptionLike>(getComLightningkiteKhrysalisObservablesObservablePropertyObservableNN(this.text).pipe(rxDebounceTime(1000)).pipe(rxDistinctUntilChanged()).pipe(rxFlatMap((it: string): (Observable<(Array<GeoAddress> | null)> | null) => comLightningkiteKhrysalisAndroidActivityAccessGeocode(dependency, it, undefined))).subscribe((it: (Array<GeoAddress> | null)): void => {
                    this.options.value = it
        }, undefined, undefined), getAndroidViewViewRemoved(view));
        
        return view;
    }
}

