// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: vg/ExternalTestVG.kt
// Package: com.lightningkite.butterflytemplate.vg
import { copyDateMod, copyDateModRelative } from 'butterfly-web/dist/time/Date'
import { GeoCoordinate } from 'butterfly-web/dist/location/GeoCoordinate'
import { xActivityAccessOpenEvent, xActivityAccessOpenMap } from 'butterfly-web/dist/views/ViewDependency'
import { xViewOnClick } from 'butterfly-web/dist/views/View.ext'
import { ExternalTestXml } from '../layout/ExternalTestXml'
import { ViewGenerator } from 'butterfly-web/dist/views/ViewGenerator'

//! Declares com.lightningkite.butterflytemplate.vg.ExternalTestVG
export class ExternalTestVG extends ViewGenerator {
    public constructor() {
        super();
    }
    
    
    
    //! Declares com.lightningkite.butterflytemplate.vg.ExternalTestVG.title
    public get title(): string { return "External Test"; }
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = new ExternalTestXml();
        
        const view = xml.setup(dependency);
        
        
        //--- Set Up xml.scrollView (overwritten on flow generation)
        
        //--- Set Up xml.openMap
        xViewOnClick(xml.openMap, undefined, (): void => {
                xActivityAccessOpenMap(dependency, new GeoCoordinate(41.7269, (-111.8432)), "Lightning Kite", 14);
        });
        
        //--- Set Up xml.openWeb
        xViewOnClick(xml.openWeb, undefined, (): void => {
                window.open("https://lightningkite.com", "_blank");
        });
        
        //--- Set Up xml.openEvent
        xViewOnClick(xml.openEvent, undefined, (): void => {
                xActivityAccessOpenEvent(dependency, "A Virtual Lunch with LK", "Come eat virtual food with us!", "Lightning Kite in Logan Utah", copyDateMod(copyDateMod(copyDateMod(copyDateModRelative(new Date(), Date.prototype.getDate, Date.prototype.setDate, 1), Date.prototype.setHours, 12), Date.prototype.setMinutes, 0), Date.prototype.setSeconds, 0), copyDateMod(copyDateMod(copyDateMod(copyDateModRelative(new Date(), Date.prototype.getDate, Date.prototype.setDate, 1), Date.prototype.setHours, 13), Date.prototype.setMinutes, 0), Date.prototype.setSeconds, 0));
        });
        
        //--- Generate End (overwritten on flow generation)
        
        return view;
    }
    
    //--- Init
    
    
    
    //--- Actions
    
    //--- Action openMapClick
    //--- Action openWebClick
    //--- Action openEventClick
    
    //--- Body End
}

