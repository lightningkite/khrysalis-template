// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: vg/ExternalTestVG.kt
// Package: com.lightningkite.butterflytemplate.vg
import { xActivityAccessOpenEvent, xActivityAccessOpenMap, xActivityAccessRequestFile, xActivityAccessRequestFiles, xActivityAccessRequestImageGallery, xActivityAccessRequestImagesGallery, xActivityAccessRequestMediaGallery, xActivityAccessRequestMediasGallery, xActivityAccessRequestVideoGallery, xActivityAccessRequestVideosGallery } from 'butterfly/dist/views/ViewDependency'
import { copyDateMod, copyDateModRelative } from 'butterfly/dist/time/Date'
import { GeoCoordinate } from 'butterfly/dist/location/GeoCoordinate'
import { ExternalTestXml } from '../layout/ExternalTestXml'
import { ViewGenerator } from 'butterfly/dist/views/ViewGenerator'
import { xViewOnClick } from 'butterfly/dist/views/View.ext'

//! Declares com.lightningkite.butterflytemplate.vg.ExternalTestVG
export class ExternalTestVG extends ViewGenerator {
    public constructor() {
        super();
    }
    
    
    
    //! Declares com.lightningkite.butterflytemplate.vg.ExternalTestVG.title
    public get title(): string { return "External Test"; }
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = new ExternalTestXml();
        
        const view = xml.setup(dependency);
        
        
        //--- Set Up xml.scrollView (overwritten on flow generation)
        
        //--- Set Up xml.openMap
        xViewOnClick(xml.openMap, undefined, (): void => {
                xActivityAccessOpenMap(dependency, new GeoCoordinate(41.7269, (-111.8432)), "Lightning Kite", 14);
        });
        
        //--- Set Up xml.openWeb
        xViewOnClick(xml.openWeb, undefined, (): void => {
                window.open("https://lightningkite.com", "_blank");
        });
        
        //--- Set Up xml.openEvent
        xViewOnClick(xml.openEvent, undefined, (): void => {
                xActivityAccessOpenEvent(dependency, "A Virtual Lunch with LK", "Come eat virtual food with us!", "Lightning Kite in Logan Utah", copyDateMod(copyDateMod(copyDateMod(copyDateModRelative(new Date(), Date.prototype.getDate, Date.prototype.setDate, 1), Date.prototype.setHours, 12), Date.prototype.setMinutes, 0), Date.prototype.setSeconds, 0), copyDateMod(copyDateMod(copyDateMod(copyDateModRelative(new Date(), Date.prototype.getDate, Date.prototype.setDate, 1), Date.prototype.setHours, 13), Date.prototype.setMinutes, 0), Date.prototype.setSeconds, 0));
        });
        
        //--- Set Up xml.pickImage
        xViewOnClick(xml.pickImage, undefined, (): void => {
                xActivityAccessRequestImageGallery(dependency, (it: File): void => {
                        console.log(`Got ${it}`);
                });
        });
        
        //--- Set Up xml.pickImages
        xViewOnClick(xml.pickImages, undefined, (): void => {
                xActivityAccessRequestImagesGallery(dependency, (it: Array<File>): void => {
                        console.log(`Got ${it}`);
                });
        });
        
        //--- Set Up xml.pickVideo
        xViewOnClick(xml.pickVideo, undefined, (): void => {
                xActivityAccessRequestVideoGallery(dependency, (it: File): void => {
                        console.log(`Got ${it}`);
                });
        });
        
        //--- Set Up xml.pickVideos
        xViewOnClick(xml.pickVideos, undefined, (): void => {
                xActivityAccessRequestVideosGallery(dependency, (it: Array<File>): void => {
                        console.log(`Got ${it}`);
                });
        });
        
        //--- Set Up xml.pickMedia
        xViewOnClick(xml.pickMedia, undefined, (): void => {
                xActivityAccessRequestMediaGallery(dependency, (it: File): void => {
                        console.log(`Got ${it}`);
                });
        });
        
        //--- Set Up xml.pickMedias
        xViewOnClick(xml.pickMedias, undefined, (): void => {
                xActivityAccessRequestMediasGallery(dependency, (it: Array<File>): void => {
                        console.log(`Got ${it}`);
                });
        });
        
        //--- Set Up xml.pickFile
        xViewOnClick(xml.pickFile, undefined, (): void => {
                xActivityAccessRequestFile(dependency, (it: File): void => {
                        console.log(`Got ${it}`);
                });
        });
        
        //--- Set Up xml.pickFiles
        xViewOnClick(xml.pickFiles, undefined, (): void => {
                xActivityAccessRequestFiles(dependency, (it: Array<File>): void => {
                        console.log(`Got ${it}`);
                });
        });
        
        //--- Generate End (overwritten on flow generation)
        
        return view;
    }
    
    //--- Init
    
    
    
    //--- Actions
    
    //--- Action openMapClick
    //--- Action openWebClick
    //--- Action openEventClick
    
    public pickImageClick(): void {
    }
    public pickImagesClick(): void {
    }
    public pickVideoClick(): void {
    }
    public pickVideosClick(): void {
    }
    public pickMediaClick(): void {
    }
    public pickMediasClick(): void {
    }
    public pickFileClick(): void {
    }
    public pickFilesClick(): void {
    }
    
    //--- Body End
}

