// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: vg/SliderDemoVG.shared.kt
// Package: com.lightningkite.khrysalistemplate.vg
import { androidWidgetTextViewBindText } from 'khrysalis/dist/observables/binding/TextView.binding.actual'
import { androidWidgetSeekBarBind } from 'khrysalis/dist/observables/binding/SeekBar.binding.actual'
import { MutableObservableProperty } from 'khrysalis/dist/observables/MutableObservableProperty.shared'
import { ratingBarBindFloatMutable, ratingBarBindMutable } from 'khrysalis/dist/observables/binding/RatingBar.binding.actual'
import { StandardObservableProperty } from 'khrysalis/dist/observables/StandardObservableProperty.shared'
import { ViewGenerator } from 'khrysalis/dist/views/ViewGenerator.shared'
import { comLightningkiteKhrysalisObservablesMutableObservablePropertyTransformed } from 'khrysalis/dist/observables/TransformedMutableObservableProperty.shared'
import { SliderDemoXml } from '../layout/SliderDemoXml'

//! Declares com.lightningkite.khrysalistemplate.vg.SliderDemoVG
export class SliderDemoVG extends ViewGenerator {
    public constructor() {
        super();
        this.ratio = new StandardObservableProperty(0, undefined);
        this.percent = comLightningkiteKhrysalisObservablesMutableObservablePropertyTransformed(this.ratio, (it) => Math.floor((it * 100)), (it) => it / 100);
        this.obsRatingInt = comLightningkiteKhrysalisObservablesMutableObservablePropertyTransformed(this.ratio, (it) => Math.floor((it * 5)), (it) => it / 5);
        this.obsRatingFloat = comLightningkiteKhrysalisObservablesMutableObservablePropertyTransformed(this.ratio, (it) => it * 5, (it) => it / 5);
    }
    
    //! Declares com.lightningkite.khrysalistemplate.vg.SliderDemoVG.title
    public get title(): string { return "Slider Demo"; }
    
    
    public readonly ratio: StandardObservableProperty<number>;
    
    public readonly percent: MutableObservableProperty<number>;
    
    public readonly obsRatingInt: MutableObservableProperty<number>;
    
    public readonly obsRatingFloat: MutableObservableProperty<number>;
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = new SliderDemoXml();
        
        const view = xml.setup(dependency);
        
        
        androidWidgetSeekBarBind(xml.slider, 0, 100, this.percent);
        androidWidgetTextViewBindText(xml.valueDisplay, this.percent, (it) => it.toString());
        
        ratingBarBindMutable(xml.rating, 5, this.obsRatingInt);
        ratingBarBindMutable(xml.ratingDisplayStars, 5, this.obsRatingInt);
        ratingBarBindMutable(xml.ratingDisplayStarsSmall, 5, this.obsRatingInt);
        androidWidgetTextViewBindText(xml.ratingDisplayNumber, this.obsRatingInt, (it) => it.toString());
        
        ratingBarBindFloatMutable(xml.ratingFloat, 5, this.obsRatingFloat);
        ratingBarBindFloatMutable(xml.ratingDisplayStarsFloat, 5, this.obsRatingFloat);
        ratingBarBindFloatMutable(xml.ratingDisplayStarsSmallFloat, 5, this.obsRatingFloat);
        androidWidgetTextViewBindText(xml.ratingDisplayNumberFloat, this.obsRatingFloat, (it) => it.toString());
        
        return view;
    }
}

