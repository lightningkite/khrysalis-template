// Generated by Khrysalis Swift converter - this file will be overwritten.
// File: vg/LoginDemoVG.kt
// Package: com.lightningkite.butterflytemplate.vg
import Butterfly
import Foundation

public class LoginDemoVG : ViewGenerator {
    public unowned var stack: ObservableStack<ViewGenerator>
    public init(stack: ObservableStack<ViewGenerator>) {
        self.stack = stack
        let form: Form = Form()
        self.form = form
        self.loading = StandardObservableProperty(underlyingValue: false)
        super.init()
        //Necessary properties should be initialized now
        self.username = self.form.field(name: R.string.username, defaultValue: "", validation: { (field) -> ViewString? in field.required() })
        self.password = self.form.field(name: R.string.password, defaultValue: "", validation: { (field) -> ViewString? in field.required() })
        self.verifyPassword = self.form.field(name: R.string.verify_password, defaultValue: "", validation: { (field) -> ViewString? in field.required() ?? field.matches(other: self.password) })
        self.agree = self.form.field(name: R.string.password, defaultValue: false, validation: { (field) -> ViewString? in ViewStringResource(resource: R.string.mustAgree).unless(condition: field.value) })
    }
    
    override public var title: String {
        get { return "Log In Demo" }
    }
    
    public let form: Form
    public var username: (FormField<String>)!
    public var password: (FormField<String>)!
    public var verifyPassword: (FormField<String>)!
    public var agree: (FormField<Bool>)!
    public let loading: MutableObservableProperty<Bool>
    
    override public func generate(dependency: ViewControllerAccess) -> UIView {
        let xml = LoginDemoXml()
        let view = xml.setup(dependency: dependency)
        
        xml.username.bindString(observable: self.username.observable)
        xml.password.bindString(observable: self.password.observable)
        xml.verifyPassword.bindString(observable: self.verifyPassword.observable)
        xml.agree.bind(observable: self.agree.observable)
        xml.submitLoading.bindLoading(loading: self.loading)
        xml.submit.onClick(action: { () -> Void in self.submit() })
        
        return view
    }
    
    private func submit() -> Void {
        self.form.runOrDialog(action: { () -> Void in 
                print("Submit!")
                self.loading.value = true
                delay(milliseconds: 1000, action: { () -> Void in 
                        self.loading.value = false
                        self.stack.push(t: ExampleContentVG())
                })
        })
    }
}


