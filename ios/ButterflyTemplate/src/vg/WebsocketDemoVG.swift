// Generated by Khrysalis Swift converter - this file will be overwritten.
// File: vg/WebsocketDemoVG.kt
// Package: com.lightningkite.butterflytemplate.vg
import RxSwift
import Butterfly
import Foundation

public class WebsocketDemoVG : ViewGenerator {
    override public init() {
        self.socket = HttpClient.INSTANCE.webSocket(url: "wss://echo.websocket.org").replay(1).refCount()
        self.text = StandardObservableProperty(underlyingValue: "")
        super.init()
        //Necessary properties should be initialized now
    }
    
    
    
    override public var title: String {
        get { return "Websocket Demo" }
    }
    
    public let socket: Observable<ConnectedWebSocket>
    public let text: StandardObservableProperty<String>
    
    override public func generate(dependency: ViewControllerAccess) -> UIView {
        let xml = WebsocketDemoXml()
        let view = xml.setup(dependency: dependency)
        
        //--- Set Up xml.items
        var itemsList = [] as Array<WebSocketFrame>
        xml.items.bind(data: self.socket.switchMap({ (it) -> Observable<WebSocketFrame> in it.read }).map({ (it) -> Array<WebSocketFrame> in 
                    print("Adding item")
                    itemsList.append(it)
                    while itemsList.count > 20 {
                        itemsList.remove(at: 0)
                    }
                    return itemsList as! Array<WebSocketFrame>
            }).asObservableProperty(defaultValue: itemsList), defaultValue: WebSocketFrame(), makeView: { (observable) -> UIView in 
                //--- Make Subview For xml.items (overwritten on flow generation)
                let cellXml = ComponentTextXml()
                let cellView = cellXml.setup(dependency: dependency)
                
                //--- Set Up cellXml.label (overwritten on flow generation)
                cellXml.label.bindString(observable: ConstantObservableProperty(underlyingValue: "Some Text"))
                //--- End Make Subview For xml.items (overwritten on flow generation)
                return cellView
        })
        
        //--- Set Up xml.input
        xml.input.bindString(observable: self.text)
        
        //--- Set Up xml.submit
        xml.submit.onClick(action: { () -> Void in self.socket.take(1).subscribe(onNext: { (it) -> Void in it.onNext(WebSocketFrame(text: self.text.value)) }, onError: nil, onCompleted: nil).until(condition: xml.submit.removed) })
        
        //--- Generate End (overwritten on flow generation)
        
        return view
    }
    
    //--- Init
    
    
    
    //--- Actions
    
    
    public func submitClick() -> Void {
    }
    
    //--- Body End
}


