// File: /home/jivie/Projects/khrysalis-template/android/src/main/java/com/lightningkite/butterflytemplate/vg/SelectDemoVG.kt
// Package: com.lightningkite.butterflytemplate.vg
// Generated by Khrysalis - this file will be overwritten.
import UIKit
import LKButterfly
import Foundation

public class SelectDemoVG : ViewGenerator, EntryPoint {
    public unowned var stack: ObservableStack<ViewGenerator>
    public init(stack: ObservableStack<ViewGenerator>) {
        self.stack = stack
        self.options = [VideoDemoVG(), WebsocketDemoVG(), HttpDemoVG(), ExternalTestVG(), PongDemoVG(), MarginTestsVG(), MultipleDemoVG(), DateButtonDemoVG(), MapDemoVG(), LocationDemoVG(), LoadImageDemoVG(), ControlsDemoVG(), ExampleContentVG(), ViewPagerDemoVG(stack: stack), SegmentedControlDemoVG(), SliderDemoVG(), DateRangeDemoVG(), LoginDemoVG(stack: stack), DrawableDemoVG(), PreviewVG()]
        super.init()
        //Necessary properties should be initialized now
    }
    
    override public var title: String {
        get { return "Select Demo" }
    }
    
    public let options: Array<ViewGenerator>
    
    public func selectVG(viewGenerator: ViewGenerator) -> Void {
        self.stack.push(t: viewGenerator)
    }
    
    override public func generate(dependency: ViewControllerAccess) -> UIView {
        let xml = SelectDemoXml()
        let view = xml.setup(dependency: dependency)
        
        xml.list.bind(data: ConstantObservableProperty(underlyingValue: self.options), defaultValue: self.options.first!, makeView: { (obs) -> UIView in
            let xml = ComponentTestXml()
            let view = xml.setup(dependency: dependency)
            xml.label.bindText(observable: obs, transform: { (it) -> String in it.title })
            xml.button.onClick(action: { () -> Void in self.selectVG(viewGenerator: obs.value) })
            return view
        })
        
        return view
    }
    
    public var mainStack: ObservableStack<ViewGenerator>? {
        get { return self.stack }
    }
}

