// Generated by Khrysalis Swift converter - this file will be overwritten.
// File: vg/BleServerDemoVG.kt
// Package: com.lightningkite.butterflytemplate.vg
import UIKit
import Butterfly
import ButterflyBluetooth
import Foundation

public class BleServerDemoVG : ViewGenerator {
    override public init() {
        let utfValue: StandardObservableProperty<String> = StandardObservableProperty(underlyingValue: "")
        self.utfValue = utfValue
        super.init()
        //Necessary properties should be initialized now
        self.server = dictionaryOf(Pair(UUID.randomUUID(), BleServerDelegatePerCharacteristic.Service(debugName: "Test Service", primary: true, delegates: dictionaryOf(Pair(UUID.randomUUID(), BleServerDelegatePerCharacteristic.FromProperty(debugName: "utfValue", property: self.utfValue.map(read: { (it) -> Data in it.data(using: String.Encoding.utf8)! }, write: { (it) -> String in String(data: it, encoding: String.Encoding.utf8)! })))))))
    }
    
    
    
    override public var title: String {
        get { return "Ble Server Demo" }
    }
    
    public let utfValue: StandardObservableProperty<String>
    public var server: (Dictionary<UUID, BleServerDelegatePerCharacteristic.Service>)!
    
    override public func generate(dependency: ViewControllerAccess) -> UIView {
        let xml = BleServerDemoXml()
        let view = xml.setup(dependency: dependency)
        
        //--- Set Up xml.info
        xml.info.text = """
        
        Service: \(self.server.keys.first())
        Characteristic: \(self.server.values.first().delegates.keys.first())
        
        """.trimmingCharacters(in: .whitespacesAndNewlines)
        
        //--- Server!
        dependency.bleServer(delegate: BleServerDelegatePerCharacteristic(services: dictionaryOf(Pair(UUID.randomUUID(), BleServerDelegatePerCharacteristic.Service(debugName: "Test Service", primary: true, delegates: dictionaryOf(Pair(UUID.randomUUID(), BleServerDelegatePerCharacteristic.FromProperty(debugName: "utfValue", property: self.utfValue.map(read: { (it) -> Data in it.data(using: String.Encoding.utf8)! }, write: { (it) -> String in String(data: it, encoding: String.Encoding.utf8)! }))))))))).until(condition: view.removed)
        
        //--- Set Up xml.utfValue
        xml.utfValue.bindString(observable: self.utfValue)
        
        //--- Generate End (overwritten on flow generation)
        
        return view
    }
    
    //--- Init
    
    
    
    //--- Actions
    
    
    //--- Body End
}


