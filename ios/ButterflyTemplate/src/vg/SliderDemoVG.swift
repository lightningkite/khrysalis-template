// Generated by Khrysalis Swift converter - this file will be overwritten.
// File: vg/SliderDemoVG.kt
// Package: com.lightningkite.butterflytemplate.vg
import UIKit
import Butterfly
import Foundation

public class SliderDemoVG : ViewGenerator {
    override public init() {
        let ratio: StandardObservableProperty<Float> = StandardObservableProperty(underlyingValue: 0)
        self.ratio = ratio
        super.init()
        //Necessary properties should be initialized now
        self.percent = self.ratio.map(read: { (it) -> Int in Int((it * 100)) }, write: { (it) -> Float in Float(it) / 100 })
        self.obsRatingInt = self.ratio.map(read: { (it) -> Int in Int((it * 5)) }, write: { (it) -> Float in Float(it) / 5 })
        self.obsRatingFloat = self.ratio.map(read: { (it) -> Float in it * 5 }, write: { (it) -> Float in it / 5 })
    }
    
    override public var title: String {
        get { return "Slider Demo" }
    }
    
    public let ratio: StandardObservableProperty<Float>
    public var percent: (MutableObservableProperty<Int>)!
    public var obsRatingInt: (MutableObservableProperty<Int>)!
    public var obsRatingFloat: (MutableObservableProperty<Float>)!
    
    override public func generate(dependency: ViewControllerAccess) -> UIView {
        let xml = SliderDemoXml()
        let view = xml.setup(dependency: dependency)
        
        xml.slider.bind(start: 0, endInclusive: 100, observable: self.percent)
        xml.valueDisplay.bindText(observable: self.percent, transform: { (it) -> String in String(kotlin: it) })
        xml.progress.bindFloat(observable: self.ratio)
        
        xml.rating.bind(stars: 5, observable: self.obsRatingInt)
        xml.ratingDisplayStars.bind(stars: 5, observable: self.obsRatingInt)
        xml.ratingDisplayStarsSmall.bind(stars: 5, observable: self.obsRatingInt)
        xml.ratingDisplayNumber.bindText(observable: self.obsRatingInt, transform: { (it) -> String in String(kotlin: it) })
        
        xml.ratingFloat.bindFloat(stars: 5, observable: self.obsRatingFloat)
        xml.ratingDisplayStarsFloat.bindFloat(stars: 5, observable: self.obsRatingFloat)
        xml.ratingDisplayStarsSmallFloat.bindFloat(stars: 5, observable: self.obsRatingFloat)
        xml.ratingDisplayNumberFloat.bindText(observable: self.obsRatingFloat, transform: { (it) -> String in String(kotlin: it) })
        
        return view
    }
}


