// File: /home/jivie/Projects/khrysalis-template/android/src/main/java/com/lightningkite/butterflytemplate/vg/VideoDemoVG.kt
// Package: com.lightningkite.butterflytemplate.vg
// Generated by Khrysalis - this file will be overwritten.
import UIKit
import LKButterfly
import Foundation

public class VideoDemoVG : ViewGenerator {
    override public init() {
        self.currentVideo = (StandardObservableProperty(underlyingValue: VideoRemoteUrl(url: "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4") as Video?) as StandardObservableProperty<Video?>)
        self.timesPlayPressed = (StandardObservableProperty(underlyingValue: 0 as Int) as StandardObservableProperty<Int>)
        super.init()
        //Necessary properties should be initialized now
    }
    
    
    
    override public var title: String {
        get { return "Video Demo" }
    }
    
    public let currentVideo: StandardObservableProperty<Video?>
    public let timesPlayPressed: StandardObservableProperty<Int>
    
    override public func generate(dependency: ViewControllerAccess) -> UIView {
        let xml = VideoDemoXml()
        let view = xml.setup(dependency: dependency)
        
        //--- Set Up xml.video
        xml.video.bind(video: self.currentVideo)
        
        //--- Set Up xml.thumbnail
        xml.thumbnail.bindVideoThumbnail(video: self.currentVideo)
        
        //--- Set Up xml.play (overwritten on flow generation)
        xml.play.onClick(action: { () -> Void in self.playClick() })
        
        //--- Set Up xml.gallery
        xml.gallery.onClick(action: { () -> Void in dependency.requestVideoGallery(callback: { (it) -> Void in self.currentVideo.value = VideoReference(uri: it) }) })
        
        //--- Set Up xml.camera
        xml.camera.onClick(action: { () -> Void in dependency.requestVideoCamera(callback: { (it) -> Void in self.currentVideo.value = VideoReference(uri: it) }) })
        
        //--- Set Up xml.galleryMulti
        xml.galleryMulti.onClick(action: { () -> Void in dependency.requestVideosGallery(callback: { (it) -> Void in if let it = (it.first) {
            self.currentVideo.value = VideoReference(uri: it)
        } }) })
        
        //--- Generate End (overwritten on flow generation)
        
        return view
    }
    
    //--- Init
    
    
    
    //--- Actions
    
    public func playClick() -> Void {
        self.timesPlayPressed.value += 1
        switch self.timesPlayPressed.value % 3 {
            case 0:
            self.currentVideo.value = VideoRemoteUrl(url: "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4")
            break
            case 1:
            self.currentVideo.value = VideoRemoteUrl(url: "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4")
            break
            case 2:
            self.currentVideo.value = nil
            break
            default: break
        }
        
    }
    
    //--- Action galleryClick
    
    public func cameraClick() -> Void {
    }
    public func galleryMultiClick() -> Void {
    }
    
    //--- Body End
}

