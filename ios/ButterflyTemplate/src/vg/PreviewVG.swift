// File: /home/jivie/Projects/khrysalis-template/android/src/main/java/com/lightningkite/butterflytemplate/vg/PreviewVG.kt
// Package: com.lightningkite.butterflytemplate.vg
// Generated by Khrysalis - this file will be overwritten.
import UIKit
import LKButterfly
import Foundation

public class PreviewVG : ViewGenerator {
    override public init() {
        self.previews = [XmlPreview(name: "ControlsDemoXml", make: { (it) -> UIView in ControlsDemoXml().setup(dependency: it) }), XmlPreview(name: "DateRangeDemoXml", make: { (it) -> UIView in DateRangeDemoXml().setup(dependency: it) }), XmlPreview(name: "ExampleContentXml", make: { (it) -> UIView in ExampleContentXml().setup(dependency: it) }), XmlPreview(name: "LoginDemoXml", make: { (it) -> UIView in LoginDemoXml().setup(dependency: it) }), XmlPreview(name: "MainXml", make: { (it) -> UIView in MainXml().setup(dependency: it) }), XmlPreview(name: "SegmentedControlDemoXml", make: { (it) -> UIView in SegmentedControlDemoXml().setup(dependency: it) }), XmlPreview(name: "SelectDemoXml", make: { (it) -> UIView in SelectDemoXml().setup(dependency: it) }), XmlPreview(name: "SliderDemoXml", make: { (it) -> UIView in SliderDemoXml().setup(dependency: it) }), XmlPreview(name: "ViewPagerDemoXml", make: { (it) -> UIView in ViewPagerDemoXml().setup(dependency: it) })]
        self.previewIndex = StandardObservableProperty(underlyingValue: 0)
        super.init()
        //Necessary properties should be initialized now
    }
    
    override public var title: String {
        get { return "Preview" }
    }
    
    public class XmlPreview {
        public var name: String
        public var make:  (ViewControllerAccess) -> UIView
        public init(name: String, make: @escaping  (ViewControllerAccess) -> UIView) {
            self.name = name
            self.make = make
            //Necessary properties should be initialized now
        }
    }
    
    public let previews: Array<XmlPreview>
    
    public let previewIndex: StandardObservableProperty<Int>
    
    override public func generate(dependency: ViewControllerAccess) -> UIView {
        let xml = PreviewXml()
        let view = xml.setup(dependency: dependency)
        xml.pager.bind(items: self.previews, showIndex: self.previewIndex, makeView: { (it) -> UIView in it.make(dependency) })
        self.previewIndex.subscribeBy(onNext: { (it) -> Void in xml.viewName.text = self.previews[it].name }).until(condition: view.removed)
        return view
    }
    
}

