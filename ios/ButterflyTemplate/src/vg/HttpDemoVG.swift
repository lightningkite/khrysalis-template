// Generated by Khrysalis Swift converter - this file will be overwritten.
// File: vg/HttpDemoVG.kt
// Package: com.lightningkite.butterflytemplate.vg
import RxSwift
import UIKit
import Butterfly
import Foundation

public class HttpDemoVG : ViewGenerator {
    override public init() {
        super.init()
        //Necessary properties should be initialized now
    }
    
    
    
    override public var title: String {
        get { return "Http Demo" }
    }
    
    public class Post : Codable, KDataClass {
        public var userId: Int64
        public var id: Int64
        public var title: String
        public var body: String
        public init(userId: Int64, id: Int64, title: String, body: String) {
            self.userId = userId
            self.id = id
            self.title = title
            self.body = body
            //Necessary properties should be initialized now
        }
        convenience required public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: CodingKeys.self)
            self.init(
                userId: try values.decode(Int64.self, forKey: .userId),
                id: try values.decode(Int64.self, forKey: .id),
                title: try values.decode(String.self, forKey: .title),
                body: try values.decode(String.self, forKey: .body)
            )
        }
        
        enum CodingKeys: String, CodingKey {
            case userId = "userId"
            case id = "id"
            case title = "title"
            case body = "body"
        }
        
        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(self.userId, forKey: .userId)
            try container.encode(self.id, forKey: .id)
            try container.encode(self.title, forKey: .title)
            try container.encode(self.body, forKey: .body)
        }
        
        public func hash(into hasher: inout Hasher) {
            hasher.combine(userId)
            hasher.combine(id)
            hasher.combine(title)
            hasher.combine(body)
        }
        public static func == (lhs: Post, rhs: Post) -> Bool { return lhs.userId == rhs.userId && lhs.id == rhs.id && lhs.title == rhs.title && lhs.body == rhs.body }
        public var description: String { return "Post(userId = \(self.userId), id = \(self.id), title = \(self.title), body = \(self.body))" }
        public func copy(userId: Int64? = nil, id: Int64? = nil, title: String? = nil, body: String? = nil) -> Post { return Post(userId: userId ?? self.userId, id: id ?? self.id, title: title ?? self.title, body: body ?? self.body) }
    }
    
    override public func generate(dependency: ViewControllerAccess) -> UIView {
        let xml = HttpDemoXml()
        let view = xml.setup(dependency: dependency)
        
        //--- Call
        let obs = HttpClient.INSTANCE.callWithProgress(url: "https://jsonplaceholder.typicode.com/posts/", parse: { (it) -> Single<Array<HttpDemoVG.Post>> in (it.readJson() as Single<Array<HttpDemoVG.Post>>) })
        
        //--- Set Up xml.progress
        xml.progress.bindFloat(observable: obs.map({ (it) -> Float in it.approximate }).asObservableProperty(defaultValue: 0))
        
        //--- Set Up xml.items
        xml.items.bind(data: obs
                .mapNotNull(transform: { (it) -> Array<HttpDemoVG.Post>? in it.response })
                .asObservableProperty(defaultValue: [Post(userId: 0, id: 0, title: "Loading...", body: "-")]), defaultValue: Post(userId: 0, id: 0, title: "Default", body: "Failure"), makeView: { (observable) -> UIView in 
                //--- Make Subview For xml.items
                let cellXml = ComponentTextXml()
                let cellView = cellXml.setup(dependency: dependency)
                
                //--- Set Up cellXml.label
                cellXml.label.bindString(observable: observable.map(read: { (it) -> String in it.title }))
                //--- End Make Subview For xml.items
                return cellView
        })
        
        //--- Generate End (overwritten on flow generation)
        
        return view
    }
    
    //--- Init
    
    
    
    //--- Actions
    
    
    //--- Body End
}


