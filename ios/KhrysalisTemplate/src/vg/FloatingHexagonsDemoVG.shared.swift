// Generated by Khrysalis Swift converter - this file will be overwritten.
// File: vg/FloatingHexagonsDemoVG.shared.kt
// Package: com.lightningkite.khrysalistemplate.vg
import Foundation
import Khrysalis
import CoreGraphics

public class FloatingHexagonsDemoVG : ViewGenerator {
    override public init() {
        super.init()
        //Necessary properties should be initialized now
    }
    
    
    override public var title: String {
        get { return "Floating Hexagons Test" }
    }
    
    override public func generate(dependency: ViewDependency) -> View {
        let xml = FloatingHexagonsDemoXml()
        let view = xml.setup(dependency: dependency)
        return view
    }
}

public class FloatingHexagonsDelegate : CustomViewDelegate {
    override public init() {
        self.backgroundPaint = Paint()
        self.hexagonPaint = Paint()
        self.location = nil
        self.moveTo = nil
        self.animationTime = 0
        self.hexagons = nil
        super.init()
        //Necessary properties should be initialized now
        self.hexagonPaint.strokeWidth = 4
        self.hexagonPaint.color = 0xFFFFFFFF.asColor()
        self.backgroundPaint.color = 0xFFFFFFFF.asColor()
        self.backgroundPaint.textSize = 12
    }
    
    
    
    public let backgroundPaint: Paint
    public let hexagonPaint: Paint
    
    public var location: CGFloat?
    public var moveTo: CGFloat?
    public var animationTime: CGFloat
    
    public var hexagons: Array<Hexagon>?
    
    public func frame(time: CGFloat) -> Void {
        if let loc = (self.location) { 
            if let moveTo = (self.moveTo) { 
                if abs(loc - moveTo) > 0.01, self.animationTime > 0 {
                    let delta = (moveTo - loc) / self.animationTime
                    self.hexagons?.forEach({ (it) -> Void in it.moveX(x: delta) })
                    self.location = loc + delta
                    self.animationTime = self.animationTime - time
                }
            }
        }
    }
    
    
    
    override public func draw(canvas: Canvas, width: CGFloat, height: CGFloat, displayMetrics: DisplayMetrics) -> Void {
        if self.hexagons == nil {
            var tempList: Array<Hexagon> = []
            for i in ((0...7)){
                tempList.append(Hexagon(centerX: (CGFloat(Random.Default.INSTANCE.nextFloat()) * width * 1.5), centerY: (CGFloat(Random.Default.INSTANCE.nextFloat()) * height), radius: CGFloat(((CGFloat(Random.Default.INSTANCE.nextFloat()) + 0.2) * width / 4)), layer: Random.Default.INSTANCE.nextInt(from: 1, until: 5), paint: self.hexagonPaint))
            }
            self.hexagons = tempList
        }
        if self.location == nil {
            self.location = width / 2
            self.moveTo = width / 2
        }
        if self.backgroundPaint.shader == nil {
            self.backgroundPaint.shader = newLinearGradient(x0: width, y0: 0, x1: 0, y1: height, colors: [0xFF773DBD.asColor(), 0xFF1226AA.asColor()], positions: [0.25, 1], tile: Shader.TileMode.REPEAT)
        }
        canvas.drawRect(0, 0, width, height, self.backgroundPaint)
        self.hexagons?.forEach({ (it) -> Void in it.draw(canvas: canvas) })
    }
    
    public func moveToPos(x: CGFloat, time: CGFloat) -> Void {
        self.moveTo = x
        self.animationTime = time
    }
    
    override public func onTouchDown(id: Int, x: CGFloat, y: CGFloat, width: CGFloat, height: CGFloat) -> Bool {
        self.moveToPos(x: x, time: 10)
        return true
    }
    
    override public func onTouchMove(id: Int, x: CGFloat, y: CGFloat, width: CGFloat, height: CGFloat) -> Bool {
        return true
    }
    
    override public func onTouchUp(id: Int, x: CGFloat, y: CGFloat, width: CGFloat, height: CGFloat) -> Bool {
        return true
    }
    
    
    override public func generateAccessibilityView() -> View? { return nil }
    
    override public func sizeThatFitsWidth(width: CGFloat, height: CGFloat) -> CGFloat {
        return height
    }
    
    override public func sizeThatFitsHeight(width: CGFloat, height: CGFloat) -> CGFloat {
        return width
    }
}


public class Hexagon {
    public var centerX: CGFloat
    public var centerY: CGFloat
    public var radius: CGFloat
    public var layer: Int
    public var paint: Paint
    public init(centerX: CGFloat, centerY: CGFloat, radius: CGFloat, layer: Int, paint: Paint) {
        self.centerX = centerX
        self.centerY = centerY
        self.radius = radius
        self.layer = layer
        self.paint = paint
        self.degreesToRadians = 3.14159 / 180
        //Necessary properties should be initialized now
        print(self.layer)
    }
    
    
    
    
    public func draw(canvas: Canvas) -> Void {
        for i in ((Int(0)...Int(5))){
            let angle1: CGFloat = (CGFloat(i) * 60) * self.degreesToRadians
            let angle2: CGFloat = (CGFloat(i) * 60 + 60) * self.degreesToRadians
            let cornerX1 = sin(angle1) * self.radius + self.centerX
            let cornerY1 = (cos(angle1) * 1.1) * self.radius + self.centerY
            let cornerX2 = sin(angle2) * self.radius + self.centerX
            let cornerY2 = (cos(angle2) * 1.1) * self.radius + self.centerY
            self.paint.alpha = 200 / self.layer
            canvas.drawLine(cornerX1, cornerY1, cornerX2, cornerY2, self.paint)
        }
    }
    
    public func move(x: CGFloat, y: CGFloat) -> Void {
        self.centerX = self.centerX + x / CGFloat(self.layer)
        self.centerY = self.centerY + y / CGFloat(self.layer)
    }
    
    public func moveX(x: CGFloat) -> Void {
        self.centerX = self.centerX + x / CGFloat(self.layer)
    }
    
    private let degreesToRadians: CGFloat
}


